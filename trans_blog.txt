Línea de tiempo

Capítulos

Transcripción
Introduction
0:00
Hello friends today we are gonna create a full stack block application using
0:05
next.js and mongodb on the home page we have some categories latest posts and on
0:13
the right side we have the most popular and featured posts and we will patch all
0:18
these data from our database and here we have a dark mode toggle that we can
0:24
change our theme we can choose any category let's open up the single post and here
0:31
we have the command section if we are not logged in it's gonna show this link
0:37
we can login using our social accounts and right now I can add a new command
0:44
and as you realize after the authentication we have two more links here we can log out or create a new post
0:52
and this page is just like medium.com if I switch to light mode you can see the
0:58
similarity let's add a title and description and the best thing is when
1:04
you select any text here you can give some styles you can make them bigger you can add any
1:12
link or just copy and paste any external content
1:18
and here you can add any color image or video
1:23
let's publish and it's here and this app is fully responsive
1:30
it's a great project to improve your react and design skills you will learn
1:35
server side and client-side beta fetching Advanced queries with mongodb
1:40
and Prisma server-side authentication and API security pagination
1:47
context API and more and at the end of the video we will deploy our application
1:54
using hostinger as you know it's the hosting sponsor of lamadev and I create
2:00
different projects using hostinger and remote on this channel and for this
2:05
project I'm gonna choose a VPS hosting because it's a full stack application and we need to run node.js for the
2:12
backend server and you will see how easy to install node.js apps with just one
2:17
click and all of these servers are super fast because they use mvme ssds and one
2:24
of the most powerful AMD processors let's choose the most popular one
2:30
and if you use the link in the description below and llama Dev coupon code here you are gonna get an extra
2:37
discount after purchasing you are ready to set up your server
2:43
you can choose any location we are gonna install a control panel and
2:49
it's gonna be Cloud panel let's create a password and finish setup it's gonna take a while
2:57
and after that it will be ready to deploy our apps so if you are ready let's create our app and deploy it here
Installation
3:08
okay I created here a new folder and inside this folder let's create our next
3:14
application to do that I'm going to be using my GitHub repository if you visit
3:19
this page you are gonna see this reapple story and here we have our starter Branch we are going to be using this
3:26
Branch because it includes our images here and I removed all the unnecessary files
3:34
and styles so we are gonna write everything from scratch
3:39
so let's come back and copy this URL
3:45
and I will say git clone single branch
3:51
I'm gonna write here my Branch name starter I will paste my URL Dot and
3:57
enter okay they are here let's install our
4:03
libraries I'm using yarn so I will say yarn if you are using AMPM you can say
4:08
AMPM install and it's going to install all the necessary libraries and we can
4:14
start after that during this process let me explain you the structure of the application we are
Design Structure
4:21
using next.js and let's say this is our app directory and in this directory we
4:27
will create the backhand API that we can connect to the DB and make Rod operations
4:36
and we'll have the front end part and here we will create some pages and
4:42
reusable components and when creating them we should consider the rendering method
4:49
because in next.js we can render components on the server side
4:58
or client site to decide which one to choose you can
5:03
ask yourself these questions is SEO important if the answer is yes
5:10
you should use a server-side component because search engines can directly
5:15
reach to the entire HTML document of the page and index the content easily
5:21
another question is do I need to keep the resource safe you may want to access
5:27
the backend resources directly or maybe you have some sensitive information to
5:33
hide from client in this case again choose the server site
5:38
but if you need any user interaction like event listeners you should use a
5:45
client-side component and when you need to use react hooks like use State use
5:51
effects you should prefer the client site for example our home page category
5:57
page and single post page will be on the server side because we'll fetch the data
6:05
and the login page and add new post page will be on the client side because we
6:11
need some user interaction and we will use many hooks inside them so let's design our app and after take
6:20
care of this backend part okay it's ready
Styles, Layouts, Containers
6:27
let's start our application I'll say yarn run Dev
6:34
okay it's ready let's start and it's here so let's give our initial Style
6:42
if you check the source file you are gonna see that there is a global CSS here it's basically the main CSS file
6:49
that we can use in error pages every components so I can Define my background
6:55
color text color or link colors here because I'm gonna be using them in the entire application so let's define our
7:03
background color first to do that I can create variables I will say root and
7:09
let's say background color and the default color will be white because when
7:14
we visit our website the default team will be light team let's define our text color
7:22
I'll say black and I'm going to Define two more variables soft PG
7:28
it's gonna be this gray color it's something like white but a little bit
7:33
darker so I will do the same thing for text color it's going to be black but a little bit softer
7:43
like that okay let's select our old document and I want to remove this
7:49
padding and margin by default there is a margin here so let's say padding 0 margin 0
7:56
and box sizing will be border box and after that I'm gonna create my body and
8:04
I will say 100 PW because I want to prevent any overflowing to do that I'll
8:10
say overflow X and hidden and what about links
8:17
let's see first I'm gonna create here a link next.js link and I'll say hello
8:30
and as you can see by default there is a color and this underline let's remove them I will say color will
8:38
be inherit it basically means take this color from the parent and text
8:43
decoration will be done and this style is going to apply for all
8:49
links in our application as you can see it's empty right now okay
8:55
so let's give our background color I'm not gonna give it here because as I said
9:01
we are going to toggle between our teams and it's going to apply to our container to do that I'm going to open up my
9:08
layout let's close here by the way and as you can see the body is here
9:14
inside I'm gonna create my container so let's say do
9:21
and I'm gonna wrap this children and the class name will be container
9:29
and let's come here for this container I'm gonna give minimum height
9:36
100 VH and the background color will be our background color so I'm going to be
9:41
using variable and as you can see it's here let's use it and the text color
9:47
will be again variable and text color
9:52
okay why it's not here let's use it like that
9:58
as you can see background white color is black and after that let's create our
10:05
layout so I'm going to create here one more div because I want to give some space for the left and right side and
10:13
our design will be responsive we are measuring our page we are gonna change its size
10:19
you are going to understand what I mean by that let's say wrapper
10:26
like that and I'm gonna come here and say Rubber and the maximum width
10:33
will be 15 36 pixels and I'm gonna Center this I'll say margin left
CSS Responsive Layout Tutorial
10:42
and right Auto as you can see
10:48
let's give background color and you can see better it's centered and also I want to give
10:56
here some padding because when we're sharing our page it's gonna get closer to here and for the mobile screens it's
11:04
going to start from this line I don't want to do that I want to give some space
11:09
so let's say pairing left 80 pixels
11:15
and right okay
11:20
so let's make this layout responsive firstly let's add here
11:27
where's our page here I'm going to add some more texts
11:32
maybe even more and I can add here title for example
11:40
and let's see okay and right now I'm gonna open up my
11:46
console and in this point I'm gonna decrease my rubber size so we are going to have some
11:53
more space here and let me showing more we are going to add some more space and our layout will
12:00
be responsive all the time you are going to understand better right now I'm gonna come here and I'm gonna choose my first
12:07
break point to do that I will say media screen and I'm gonna write here my breakpoint
12:16
1536 and then we are on this point I'm gonna change my wrapper
12:23
and Max width will be 1366.
12:29
let's get back this is the big screen if I come here changes its size and if I get more
12:38
I can do the same thing let's create another breakpoint I'm just gonna duplicate this
12:46
and I'm gonna write here another common breakpoint and in this case its size
12:51
will be 10 24. like that and if we are in the
13:00
time 24 again
13:10
and this time it's going to be 768 pixels those all sizes are really
13:16
commonly used so I don't recommend you to change those points
13:23
and as you can see we have more space but in this case all I want to do is
13:28
decrease in those paddings remember it was 80 pixels
13:38
but I will say make them 40 pixels
13:44
okay and this point I'm gonna create another breakpoint
13:51
let's remove those paddings and I'm gonna write it here and change this
13:57
number and if we are on this point
14:03
it's going to be 475 pixels
14:10
okay and this is the Mobile screen it's that easy guys when we add our HTML element
14:18
you are going to see how useful to create those layouts if you write them
14:23
at the beginning of the application everything will be much much easier for you
14:28
okay let's close this console and open up our
Next.js CSS Styles and Layout
14:34
application I will say localhost 3001 and this is the completed version of our application
14:42
and let's see what we are gonna need this is our home page so firstly we are
14:47
gonna need this Nail Bar this featured section
14:52
categories component we have our post list
14:57
and on the right side we have our menu we are going to need this pagination
15:03
component and finally this footer so let's create our components and use
15:10
them inside our home page so I'm gonna come here in the source
15:15
folder and I will create my components folder and the first one will be Nail Bar
15:22
and inside I will say now bar jsx and I'm going to create my function and to
15:30
give some style we are going to need a file and it's going to be a bar module
15:35
dot CSS it's going to create a unique class name for each individual component
15:43
let's do that I will say class name and let's import our style
15:49
styles from now bar
15:54
so I can use it here and say container
16:00
let's copy this and create one more component footer
16:09
I will paste and change my name and let's create this file
16:22
and I will save them and let's use them in our home page
16:29
right now I don't need them I can delete and paste here
16:34
footer let's import
16:44
okay they are here if I open my console
16:50
as we can see this is our main container and inside we have wrapper
16:56
and our nabar and footer of course we didn't give any style yet I will say container
17:04
background color red I will do the same thing for our footer and it's going to be let's say blue
17:13
and right now as you can see we have different class names so let's close here
17:20
and delete our backgrounds and for this wrapper
17:30
okay so if we check our application if I write here any post ID you are gonna see
17:37
that we are still using this number and footer so basically we are going to use those
17:42
components in all pages so instead of writing them one by one for each page I
17:50
can write it in my layout let's remove them and open up layout
17:56
and I'm gonna create here my neighbor and footer and wrap my children
18:05
by the way you can change your website title and description it's important for
18:11
SEO by the way there is no object fit for this image we are gonna change it but
18:17
before let's create our other components remember we have featured items
18:23
categories card list and menu and this by generation
18:29
so I'm gonna copy this folder and paste
18:39
and let's change them I'm gonna change them quickly
19:05
okay we have all our components and let's use them I'm going to close everything here and
19:11
open up my page let's give our class name here it's going to be container
19:19
firstly I'm gonna call my featured component and after that we are going to
19:24
have our category list and I'm going to create here a container
19:30
let's say content and it's going to include our card list and this menu I'm
19:36
creating another container that because we are going to make this container display Flex
19:43
and inside I will say cut list and menu
19:50
and inside this card list I'm gonna call my pagination component
19:58
and that's all let's see all of them are
Responsive Navbar Design
20:03
here let's start with this Nail Bar
20:08
you have social icons logo and those lyrics so let's create
20:14
three items I'm gonna open up my now bar and inside
20:19
this container social logo and let's say links by the way as
20:29
you can see I'm using here a shortcut it gives me a div with class name and
20:34
styles I can directly give here any class name if you don't know how I am doing this
20:40
you can watch my vs code extensions video basically I'm creating a new cinepad
20:46
using an extension anyway let's continue as you can see we have four items for
20:52
images let's create quickly I'm gonna call next.js in which source
20:59
will be Facebook and I need to give some width and height
21:06
let's say 24 and I'm gonna duplicate this and it's
21:13
gonna be Instagram Tick Tock I don't know why I use Tick
21:19
Tock but and YouTube
21:27
okay they are here and let's create our logo it's going to be just the text I
21:33
will drag the paste and here we have some items some links
21:39
next just think and the first one will be home page
21:45
a12 and it's going to be the home page
21:50
and we are going to have contacts part page and what else as you can see
21:57
we have toggle button to do that I can create one more component and we are going to have this login
22:03
button but if we are logged in we are gonna see here another link that we can
22:08
create new post and we are going to create logout button to do that we have to listen the user session and in order
22:16
to do that our components will be a client component because we are going to be using a session hook
22:23
I want to keep my nail bar as a server side component so basically we are going
22:29
to need a client-side component just for those authentication links
22:35
let's create our components first one will be team toggle
22:47
CSS file and
22:53
jsx file let's import our tile here
23:00
of course import styles from this path and I'm going to give my class name
23:09
and let's copy this and create one more
23:15
and I will say auth links
23:26
like that and do CSS
23:32
okay so after this about link I can call my
23:39
component and before this home page link I can
23:45
call my toggle team toggle
23:52
okay it's time to give you some styles I'm gonna close everything and open up
23:58
my nail bar here and CSS here so let's make this container display
24:05
Flex so our items will be horizontal let's separate them firstly I'm gonna
24:12
Center them vertically and justify content space between
24:19
okay what about those social icons let's copy this and
24:25
again display flex and I'm gonna give a gap between each item
24:31
time fix us I can do the same thing for those links here
24:38
display flex and gap between them will be let's say 20 pixels it's gonna be
24:43
more and I can give a height for my nail bar because in our example as you can
24:48
see there is a height and our items are centered so I will say height 100
24:57
but as you realize there is something wrong here in our application the logo is in the middle of the nail bar but in
25:05
our project it's going to the left side to prevent this I'm gonna give a width for each item for this social logo and
25:14
those links if I do that they are gonna have exactly the same size so we can see
25:19
our logo in the middle we have social logo and links I'm gonna give exactly
25:27
the same size Flex One Flex One Flex one basically we
25:34
are saying split this flexbox into three pieces and give exactly the same size
25:40
for each item if I make this 2 for example
25:45
in this case our social container will be twice smaller than logo
25:50
let's try actually I will say a color as you can see this is one unit and this
25:58
logo container is two units if I make this one
26:03
each item will be exactly the same size so if I Center my text here
26:10
let's delete this background and say text align Center
26:15
as you can see this is what we want okay let's increase this font size and font
26:21
weight 36 48 will be bold
26:27
perfect and for those links it's gonna be 20 pixels
26:34
okay right now instead of this text I can create my login button
26:40
let's open up our component and for now I'm going to create here a status effect status
26:48
and it's going to be not authenticated it's going to be temporary
26:55
and after creating our authentication functionality we are going to take this status from our hook but for now let's
27:03
use it so I'm gonna come here and create a condition I'm not going to need any
27:09
container or do here it's going to be drag the r links and I'm gonna write
27:14
here my condition I will say if status equals not authenticated
27:21
show here something if it's not show something else so if you are not
27:26
authenticated I can show here the login link
27:34
login and if we are authenticated I'm going to
27:40
create another link and it's going to be right so if you have a user we will be
27:45
able to create any post and I'm going to create a span here and it's going to be
27:51
our logout button of course we are going to need some parents I can directly use
27:56
fragments let's see as you can see login button is here
28:03
but if we are authenticated write and log out button by the way it's
28:11
not a link so I can give here cursor pointer so I'll say class name Styles and Link
28:20
let's open up quickly R Style and I will just say cursor pointer
28:30
okay so I'm going to take this back
28:37
yeah I'm gonna see a login button and let's take care of our team toggle
CSS Dark Mode Theme Toggle Design
28:43
firstly I'm gonna give some style and I'm gonna create this toggle let me zoom in and after we are going to create this
28:50
functionality firstly we are going to have a container and inside this container we are going
28:57
to have two images this Moon and this sun and I'm gonna create this circle div
29:03
and when I click on this container we are going to change its position and its
29:08
color let's do that let's close everything and open up
29:14
toggle CSS here and inside this container let's create
29:21
our images next image Source will be Moon dot PNG
29:28
let's give width and height it's going to be 14 pixels
29:35
and it's going to be sun and between them I'm gonna create another div
29:42
and its style will be let's say ball or Circle whatever so let's take care of
29:48
this container first I'm gonna give some width and height
29:54
that's a border radius 50 percent I will say cursor pointer and I'm gonna use
30:00
display Flex my items will be horizontal let's zoom in
30:07
so let's change its background color let's say black
30:14
by the way this radius is too much let's make this pixels and let's enter them
30:20
vertically align item Center and I'm going to separate my items using justify content
30:27
and space between okay so let's create our ball
30:34
it's gonna be 50 pixels and Border radius will be 50 percent and background
30:41
color let's say white for now okay so what I'm gonna do is make the
30:47
position of this ball absolute because at the beginning it's gonna be
30:54
on the left but when I click here it's going to be on the right so if I say left 0 for example
31:02
it's not going to be here because its parent is not relative
31:07
to prevent this don't forget to use position relative for the parent
31:13
actually let's see one pixel okay it's much better and when I click
31:20
it's going to be right one pixel so how we are going to implement this dark mode
Next.js Context API Tutorial
31:25
functionality to do that we can use react context API
31:31
let's open up our menu and inside source folder I'm going to create
31:37
context and inside let's say
31:43
team context jsx and let's close here
31:50
and create our context I will say export const
31:56
team context and I'm going to use create context it
32:03
comes from react and right now I can create my contacts provider
32:09
export const team context provider
32:15
if you don't know how to use context API don't worry I'm going to explain
32:21
and finally we are going to wrap these children with our provider team contacts.provider
32:29
and inside children okay there is a problem it's not defined
32:36
because I didn't say const export const and let me explain basically we created
32:43
our team context and using this context we are going to store our team State at
32:50
the beginning it's going to be light mode and using that state we are gonna decide the background color of this
32:57
application or text color of this application or whatever so we are gonna
33:02
need that state and after that we are going to create an
33:07
action when we click on this button we are gonna dispatch that action and we are gonna basically say check the state
33:14
if it's the light mode make it dark if it's the dark mode make it light
33:20
so we are gonna need two things our team state and toggle functionality and we are
33:27
gonna store those items inside our context and when we wrap our application
33:32
with this context provider you will be able to use that team State and toggle
33:38
functionality in everywhere so I'll say const
33:43
team set team you stay took and at the beginning as I
33:50
said it's going to be the light mode but there is something important here
33:55
when we click here and make it dark mode and when we refresh the page it's going
34:01
to be light mode again because of this use state to prevent this we can store
34:06
this state in our local storage let's open up application
34:12
as you can see it's empty we can create here a key and value can
34:18
be light mode so let's actually create here a function
34:24
I'll say const get from Storage local storage
34:33
and I'm gonna check my value using local storage
34:39
and I'll say get item and team and I'm gonna return this value
34:47
but there is something important here if you visit this page for the first time we are not going to have anything inside
34:54
this storage it's going to be empty and I will say in this case if it's
35:00
empty make it light by the way we are using Q State and
35:06
obviously our component will be a client-side component so I will say use client and
35:13
right now I can use this local storage this function
35:19
to say return get from local storage of course there is a typo here
35:28
there is one more brackets okay why I'm creating here a function because
35:35
remember nextges is using server site rendering by default even if you write
35:41
here use client at the beginning it's a server-side component but you are trying
35:46
to use browser local storage but in our server there is no browser so during
35:52
this transition it's going to cause some problem to prevent this I'm gonna say if
35:58
type of window is not undefined
36:08
we are saying if the transition is completed if it's the client component
36:13
use that local storage it's a little bit weird when you use next.js because in react it's much
36:21
easier but in next chance we have some additional steps we are going to do one
36:26
more thing after that you are gonna see but for now let's wrap our application with this provider and use our context
36:33
so I'm going to open up my layout and after this body I will say team
36:39
provider it's here team contacts provider
36:45
like that right now I can use my state everywhere for example inside this
36:52
toggle component let's open up and let's call our context
36:58
I'll say const team is going to come from our context I'll
37:05
say use context hook and team context thank you and remember we are using a
37:12
hook and it should be a client component
37:19
but of course we didn't pass our team yet let's open up our context as you can
37:25
see we are wrapping our children but we are not passing anything so I'm gonna say value and I'm gonna pass here my tip
37:35
let's try to use it
37:41
I'm going to open up console and as you can see this is the light mode so using
37:47
this theme I can change my style but I want to change the entire background
37:53
to do that I can use this theme contacts in my layout but remember if you do that
37:59
you have to use this use context hook and in this case it's going to be client
38:05
component but I don't want to do that that's because it's a server component and I'm using this title and description
38:11
I want to keep this as a server side component so I can come here and create
38:16
another component actually let's create other folder and I will say providers
38:23
and I'm going to create team provider and in the future we are going to create
38:30
our fashion provider this is why I created this folder
38:36
I will create my function I will make it client component
38:42
let's do exactly the same thing I'm going to copy this and paste here
38:49
let's import them and using this theme I want to change my
38:56
class name here I will say class name is going to be T dark or light
39:03
I can use this theme in my Global CSS and at the beginning remember we already
39:10
use the light mode background color white text color black but if it's too dark I'm gonna change
39:17
those variables so let's come here after this link I'll see if it's the dark mode
39:25
PJ will be this color text color will be
39:31
this color and soft PG
39:36
and finally soft text color
39:41
like that of course not
39:47
comma is going to be semicolon okay right now I'm gonna change my team
39:55
but we don't have our functionality yet Let's test it using light mode and I'm
40:02
gonna use this team provider let's open up our layout
40:07
wrap our application and of course it's going to be our
40:14
children but we didn't take any let's take children and Rob them here
40:23
okay and as you can see our background is dark right now so let's create our
40:29
functionality I'm going to come here and I'm going to create a function inside this provider
40:37
I will say cons toggle
40:42
set team now I will say if team equals light it's
40:48
going to be dark if it's dark it's gonna be light
40:53
and I can send this to go right now but remember we are using local storage
40:59
when we change this we should also change our local storage to do that I
41:05
can use use effect hook and whenever our team changes we are
41:12
going to update our local storage so I'll say set item
41:17
RT we are going to change its value so let's use this token function in our
41:24
number I mean in this toggle I will say toggle
41:30
and when I click here on click I'm going to call this function
41:37
let's click and perfect dark and Light
41:45
as you can see it's the light and if I refresh it's still dark and if
41:52
you are using some other browsers you might have some problems because as I said we are using local storage if you
42:00
run into some problems you can open up your team provider and create here a use
42:06
state and I'm gonna tag if the component is mounted or not
42:20
and using user packed hook I can make sure my component is a client
42:29
type component first I'm gonna set my state
42:36
and I can write here a condition if my component is ready
42:42
return this children let's close everything and let's change this style
42:50
let's check our application as we can see when it's dark its background is
42:55
white and this ball is black and we are changing its position
43:00
so I'm going to open up my toggle and using this theme I can change its
43:06
position so I'm gonna come here and give inner style and I'm gonna write here my
43:12
condition let's use team and I will say if it's dark
43:18
the left Position will be one pixel and background color will be these dark
43:24
color and if it's not if it's light this time right will be one and background color
43:30
will be white so I can do the same thing for my
43:36
container actually you can drag the right here background color
43:42
we can use any variable and remember text color is white
43:49
okay it's something like gray but I want to make this white so I don't want to use my CSS
43:57
I'm gonna give inner Style
44:03
if it's dark the background will be white if it's light the background will be
44:10
this color so I can remove them here
44:16
this and this left okay it's still dark
44:25
if it's dark background color will be white if it's not
44:34
foreign
44:40
okay it's still acting like a server side component
44:48
of course inside quotes let's actually run this again
45:00
okay there is no problem
45:06
but why it's not white
45:13
oh because I forgot changing my Global CSS
45:19
it's gonna be dark mode okay perfect
45:26
when I click it's gonna be it back by the way those are not vertically
45:31
centered let's open up our neighbor align item Center PATH inside links we
45:39
don't have okay awesome so what about responsive
Next.js Responsive Hamburger Menu Tutorial
45:46
design so I'm going to open up my console
45:52
for the large page we don't have any problem now for here
45:58
and for this point I can decrease my font size let's do that
46:04
let's close everything and open up now bar and I'm gonna write my media query
46:13
maximum size will be 1280
46:18
now for logo font size will be 32 pixels
46:23
it was 36 and for those links
46:29
it was 20 in this case it's going to be 18 pixels and I'm gonna decrease the gap between
46:36
them it's going to be 15. okay and when it's
46:42
10 24 I'm gonna delete those icons let's duplicate this
46:49
10 24 pixels I will say social and I'm gonna remove
46:56
this display no for the logo
47:01
it was centered remember text align will be left
47:06
and when it's smaller in this point I can decrease this size a little bit more
47:21
let's say 24 pixels and when it comes to Mobile screen I'm
47:28
gonna remove these links instead I'm gonna create here a mobile menu and when I click on that menu it's going to open
47:35
up here a container and we will be able to see our links to do that actually I
47:40
can use these auth links remember we have another component here I can use it
47:45
because we are going to be using on click event and we cannot do this in
47:50
server side component so I can directly use that component but before
47:56
I'll say if it's Mobile screen
48:01
remove those links but if I say that it's gonna remove our auth component also so instead of links
48:10
I'll say link and I'm gonna give class name for those links
48:19
styles dot link okay right now I can create here a
48:26
button let's open up our component here and I'm going to create here a use State
48:32
I'll say const open set open
48:38
use statehook at the beginning it's going to be closed so I will say false of course it's going to be use clients
48:46
and here I'm gonna create a button let's say div Burger
48:52
let's create three lines inside
48:58
basically instead of using any image I'm going to create my own menu let's come here
49:05
and I will say Burger menu it's gonna be with 20 pixels height 16
49:12
pixels I can use display flex but reaction will be different it's going to
49:17
be cold and if I say just five contact space between it's gonna separate them
49:23
let's create our lines and you can see better 100 percent it will be just two pixels
49:30
and the background color will be text color oops I set lines it's going to be line
49:39
okay it's still White text color
49:46
let's open up Global CSS actually let's create
49:53
for light mode also copy this
50:01
oh there's a comma here that was the problem but anyway it can
50:06
stay and let's see okay perfect
50:12
let's give cursor pointer
50:19
and when I click on this button by the way I gave cursor pointer here
50:27
it's going to be in the parent and when I click here I'm gonna show another
50:32
container that's right here a condition and I will say if it's open
50:38
let's create here edu I'm going to close my menu and let's say responsive menu
50:46
I'm going to create my links again home page
50:54
and others and I can do exactly the same thing here
51:00
I will copy this and paste like that
51:07
and let's write here our on click event
51:12
I will say set open it's going to be the opposite
51:20
and they are here so let's give our style
51:27
at the beginning it's going to be displayed on we are not gonna see that
51:33
say display none I can delete this and
51:39
if it's for the mobile screens it can show up let's create media query
51:51
it's going to be display Flex
51:57
like that and I can delete those items
52:10
for login and this and it's the small screen they are going
52:16
to be display no and I can move them here
52:21
in my now bar I'm gonna say links
52:28
just file content flex and like that
52:33
and finally this is responsive container what was the name
52:40
responsive menu let's actually create this here and I will say position absolute because
52:48
it's going to contain all our screen top will be 100 pixels because our
52:55
neighbor is 100 pixels it's gonna start from here and I will say left zero
53:04
and color it's gonna be PG
53:10
and I'm gonna give height I will use calculate method that because it's going to be full screen but
53:17
remember our nail bar is 100 pixels don't forget to give here a space
53:23
and it will be a hundred percent okay let's enter them here
53:32
I'll say display Flags like extraction will be column align item Center just y
53:39
content Center and gap between each item will be let's say 50. and font size will
53:46
be bigger let's open up and perfect
53:57
okay so let's take care of featured
Blog App Featured Post Design
54:03
let me zoom out as you can see we have a huge Title Here and After we have an
54:09
image and post details let's create them I will close everything and open up
54:16
featured quickly I'm going to create my title
54:23
Styles dot title and this part of the title will be bold
54:31
a llama Dev here and after that let's create a post
54:37
it's gonna have an image container
54:43
a text container inside this container we are going to
54:48
have an image I'm gonna give my source
54:57
and I will say fill so it's Gonna Fill this container in this case remember we
55:02
have to make this position relative and inside this text container
55:09
we have title
55:14
this description and a button
55:24
read more let's give class name
55:36
post description button
55:41
okay let's open up our CSS file here
55:46
firstly I'm going to give here a margin top I'm going to separate my mirror bar and
55:52
this container as you can see we don't have any width and height for this container in which container we are
55:59
going to handle that but before let's give this font size
56:05
it's really big for post again margin top I'll say
56:12
display Flex because they are horizontal line item Center and gap between this
56:17
image container and tax container will be 50 pixels let's give size for the image container
56:25
so basically I can give again Flex One Flex one so they can be equal
56:35
and after I'm going to give here height
56:41
and Position will be relative
56:47
okay I have for this image
56:56
I will just give object fit it's going to be color and for the text container I can give
57:03
some space between my items to do that I'm gonna be using column Flags
57:10
and gap between them today let's increase this size
57:16
font size 40 pixels like that and for this description
57:27
let's say 20 phone fit will be a little bit smaller and the color will be let's
57:34
say soft text color okay and finally for this button
57:43
I'm going to give some padding from top and bottom left and right
57:48
I'm going to delete the Border it's going to be known and finally for the radius let's say 5 pixels
57:56
as you can see it's too big so let's say with maximum content
58:04
by the way why it's bold it should be only this one
58:11
okay let's give class name
58:16
so I can come here and say font weight 300.
58:23
ah okay so it was already bold so I decreased this weight in this case
58:29
we don't need this class name and after that we can create our
Blog App Category Component Design
58:35
category lists let's make this light
58:41
and inside we are going to have a title and after that we are going to create a
58:46
container that contains every individual category let's close them and open up category
58:53
component which one tag this title
58:59
and after I will say categories and category inside
59:08
let's give class name for this is going to be title and inside each category we are going to
59:16
have an image and this text and when we click here it's going to
59:22
open up the blog page so let's create a link
59:28
and inside I'll say image and after this image we are going to
59:34
have the category name let's say Style I'm gonna give you my source here
59:41
style.png 32
59:47
height and I will say class name
59:54
okay let's give our link it's gonna be the blog page and we are
1:00:00
going to give here any category name it's going to be style okay and as you
1:00:06
realize each category has different background color so I can specify them
1:00:11
using their titles so I can add here one more class name
1:00:17
I'm gonna cut this actually I can delete this div
1:00:23
we already have our container this link
1:00:28
I will say class name I'm going to be using backtick and it's
1:00:33
going to be category and also Style the name of the category
1:00:41
so I'm gonna do the same thing for others let me actually copy and paste them
1:00:46
there is nothing different here like that as you can see coding culture
1:00:52
travel whatever let's see
1:00:59
I will make this light mode as you can see they are here right now
1:01:05
we can give our style first thing I'm going to give here is space they are too close
1:01:11
I'm going to open up my CSS here and I'm going to give here a margin
1:01:18
actually I can give it for this title because there is a space here also so I can give
1:01:25
both for the top and bottom so I will say title margin 50 pixels and
1:01:34
0 from left and right and for the categories
1:01:39
I'll say display Flex Flex will be rub and I'll say justify content space
1:01:46
between and 20 pixels Gap
1:01:52
okay what about each category I'm gonna Center them
1:01:58
display Flags align item Center let's give Gap
1:02:04
perfect and I'm gonna capitalize the first letter of the category text
1:02:12
to do that I will say text transform capitalize
1:02:19
okay what about those images I will just keep portal radius is going
1:02:26
to be Circle perfect now for the category I can give
1:02:32
different background colors to do that I will say
1:02:38
category and remember we have additional style here we can use it
1:02:44
and the background color will be this color let's give some padding here actually I
1:02:52
can directly give a width and height it's going to be 50 percent it will be
1:02:58
80 pixels and I'm gonna Center everything just by contact center
1:03:04
like that let's keep all the radius here
1:03:10
10 pixels okay so let's do the same thing for others I'm gonna give different colors I
1:03:18
will copy and paste them there is nothing complex here I'm just giving different backgrounds
1:03:26
and awesome and when I shrink the page
1:03:37
we are going to give responsive design and it's gonna look better there is a problem because we gave here percentage
1:03:46
that's why it looks weird and also I didn't give any responsive design for
1:03:52
this site let's do that I forgot I'm gonna open up my
1:03:57
featured CSS and firstly I'm gonna decrease this font
1:04:04
size I'll say media query I'm gonna give my breakpoint
1:04:13
it's going to affect my title font size will be 72.
1:04:20
like that and when I shrink more I can decrease again
1:04:33
it's going to be 64. what about this post I can actually
1:04:39
delete this image
1:04:44
let's say display none and if it's smaller I can decrease this
1:04:53
size more
1:05:01
46 and finally for the Mobile screen
1:05:12
is going to be a little bit smaller 36. here will be 48 here will be 36.
1:05:24
okay perfect for those categories
1:05:30
if it's in this size width will be 20 percent
1:05:36
let's do that
1:05:41
this size I'm going to say single category it was 15 but this time it's going to be
1:05:48
20 percent perfect and if it's smaller it's going to be 25
1:06:03
awesome and when it's smaller we are going to see only two items here
1:06:11
let's say 45 perfect and finally for the small screen
1:06:17
it's going to be a hundred percent so we can see it only one item per line
1:06:31
perfect it's that easy
CSS Flexbox (Content - Side Menu Design)
1:06:40
okay right now we can take care of this
1:06:46
content remember in the home page we have created a container and it contains
1:06:51
this card list and this menu basically is going to be display Flex let's do
1:06:56
that I'm gonna close here and everything here and let's open up
1:07:04
our home page here okay we have class name
1:07:10
and I will say content display flags and
1:07:15
gap between items will be 50. that's all like that so let's give some size for
1:07:22
them in our example as you can see this side is bigger than this side so I'm gonna give flex and
1:07:30
this container will be Flex 5 and this container will be Flex 2. so it's going
1:07:36
to be two and a half bigger than this menu so let's open up card list
1:07:44
and container I'll say Flex 5 and for the menu
1:07:50
it's gonna be Flags too
1:07:57
like that okay so let's take care of this card list
Blog Post Card Component Design
1:08:03
again we are gonna have title some space here and after that we are going to have
1:08:09
carts container which contains every individual cut they have an image
1:08:14
container text container and those items it's going to be really easy
1:08:20
let's come here okay this is the home page I'm going to open up card list let's close this menu
1:08:29
and I will say H1 tag this title quickly give class name Styles and title
1:08:37
and after that we are going to have our posts and inside a single post
1:08:46
and again image container
1:08:52
tax container inside this image container we are going to have our image
1:08:57
I shall create snippet for this in which also I think let's give our temporary
1:09:03
data here and I will say feel actually we can
1:09:10
create different components for single post it's going to be easier let's open up components and I'll say
1:09:17
cart
1:09:24
jsx module
1:09:35
let's import this here
1:09:46
and write it here
1:09:54
okay let's take those
1:10:01
and I'm gonna remove this like that let's import image
1:10:09
and I'm going to call my cart here actually I can call multiple times
1:10:16
like that okay we are gonna need image container
1:10:23
size but before let's create our texts we have some details here which includes
1:10:29
date and category and after title description and this link
1:10:36
so let's see detail is going to have a span let's say
1:10:41
any date category
1:10:46
I'm gonna give class name
1:10:53
for this one is gravy date and after this deal I can create my H1
1:11:00
tag is going to be my title let's copy here
1:11:09
A P tag
1:11:17
and this link
1:11:27
actually I can give link for this H1 also when we click here we can visit our
1:11:33
single blog page let's see of course we can't see because
1:11:38
of this image let's give our style first
1:11:43
ly I will say margin button I will say display Flags gap between image
1:11:49
container and text container will be 50 pixels and I will say align item Center
1:11:54
let's create our image container after we can see our component I will
1:12:01
say Flex one for the text container I will do the same thing
1:12:06
so they are going to be equal I will give any height here
1:12:13
semicolon and height and I'll say position relative right now we can see
1:12:18
it okay but we don't have any space here
1:12:24
let's open up our cart list here
1:12:30
for the title remember what we are doing margin 50 and
1:12:36
0. okay awesome I will give object fit for this image
1:12:44
did I give class name or not okay I didn't style stored image
1:12:56
cover okay for the tax container I'm gonna make
1:13:03
them horizontal sorry vertical for extraction column 9 gap between them
1:13:09
30 pixels now for this date I'm going to change
1:13:16
the color for this category and between them I will give a dash
1:13:22
that's actually give it here like that
1:13:29
for this date color will be Gray
1:13:34
now for the category color will be this red color font weight will be a
1:13:42
little bit thicker and for the description I'm gonna increase font size and decrease font
1:13:50
weight description font size 18 pixels and font
1:13:58
weight will be 300. and color will be solve text color
1:14:07
okay it's not here because I didn't give any class name
1:14:14
Styles dot description let's do the same thing for this link
1:14:22
let's see first as you can see it's much better if I open up the dark mode
1:14:28
it's going to be much softer
1:14:33
for this link I'm gonna give some water button foreign
1:14:43
pixel solid and our red color
1:14:48
as you can see its size is full to get rid of this remember what we are
1:14:54
doing with maximum content and I will give some padding
1:14:59
between top and bottom and awesome
Side Menu Component Design
1:15:05
so what about this menu
1:15:11
and we are gonna have three main sections these popular posts
1:15:17
categories and editors pick this and this component will be similar so it's
1:15:22
going to be easy to create so let's start with this subtitle and this title
1:15:29
I'll say h2 tag I'm going to copy and paste if you have
1:15:36
this problem you can basically use color brackets and a code I will say H1
1:15:43
most popular and finally I can create my div
1:15:49
I'll say items and a single item
1:15:54
actually let's make this link so we can click
1:16:00
and visit the post well now we can stay like that link
1:16:08
and inside we are going to have some texts but in
1:16:14
this side as you can see we have an image also since we are using exactly the same item
1:16:20
let's actually start with this one and then we create this one we are just gonna remove this image
1:16:27
so I'm gonna create image container and text container and inside text container we are going to have category title and
1:16:35
those details in which container
1:16:41
tax container inside this we are going to have an image
1:16:48
I'm going to use exactly the same image and I will say fill
1:16:55
I'm going to give class name because remember we are going to need object fit
1:17:00
I didn't import let's import and inside text
1:17:06
I will say span let's say travel and again remember we are going to have two
1:17:12
class names because we are going to have different background colors so I will say
1:17:18
category of course inside backtick and one more
1:17:25
and it's going to be travel and after this span let's create another H tag I'll just create random text
1:17:34
of course it's gonna be shorter and after that some details
1:17:42
let's say detail and inside we are going to have two spans first one will be
1:17:47
username let's say John Doe and the second one will be the date
1:17:53
let's give class names
1:18:03
and that's all let's give our style
1:18:08
and after we can create different items I will say let's actually give class
1:18:14
name here subtitle
1:18:20
like that
1:18:27
okay I will say color will be gray font size will be 16 and phone plate will be
1:18:36
400. now for this one it's going to be
1:18:42
smaller and as you can see we don't have any
1:18:49
space here let's give and what about this item
1:18:55
we are going to take care of these items but before let's create the first one
1:19:03
after giving style and creating other items we can take care of this so I will say display Flex align item
1:19:10
Center and gap between them now for image container
1:19:17
Plex will be one for the text container
1:19:22
Flex will be 4. by the way there is our image
1:19:29
okay it's here of course I didn't give position relative
1:19:36
and we cannot see it that because we don't have any height you can give here any custom height but
1:19:43
I'm gonna use here aspect ratio and it's going to be one to one the height and
1:19:49
width will be exactly the same size in the previous video I showed some awesome CSS tips and tricks it's a really short
1:19:57
video I highly recommend to watch it there are some tricks just like this let's see
1:20:03
okay perfect and I can make this circle and add here a border let's say image
1:20:11
for the radius and Border will be three pixels solid and light gray
1:20:19
and of course don't forget object fits
1:20:29
okay I forgot class name I think oh
1:20:36
okay so let's take care of those texts and after we can create some more firstly I'm gonna make this vertical
1:20:44
display Flags Flex Direction and Gap
1:20:50
and after that I can use my title description did I give any class
1:20:57
name okay I didn't
1:21:02
of course we have title here so I'm gonna say post title
1:21:09
font size will be 18 and phone fate will be bigger and finally I'll say color is
1:21:17
going to be our variable soft text color
1:21:24
and after that for the detail I can decrease this font size
1:21:31
it's gonna be 12. for this date
1:21:37
by the way I can give here a dash as we did before
1:21:42
and its color will be Gray
1:21:48
okay so what about this category again we are gonna have different colors
1:21:54
but before let's take care of the main container remember its class name is category
1:22:04
I'll write it here it's before title I'll say padding from top and bottom
1:22:10
three left and right eight I will give some border radius 10 pixels font size
1:22:16
will be small and the color will be white
1:22:23
okay we can't see because we don't have any background let's take this
1:22:30
category and travel background color will be this orange
1:22:35
color okay as you can see again each size is too
1:22:42
high it's going to be maximum content
1:22:47
right now I can create some others let's see how many okay we have four
1:22:56
I will take this link two three four let's actually give some other
1:23:03
categories I will say culture
1:23:12
let's say food and
1:23:18
fashion so I'm gonna copy and paste my colors
1:23:26
like that and perfect so let's give space between
1:23:34
them to do that I'm gonna use the container remember we have our items
1:23:40
here I'll say relax Direction column gap between each
1:23:46
item will be 35 pixels perfect and also I can give space
1:23:52
between here and here for top and bottom margin top
1:23:58
35 pixels and bottom will be a little bit more
1:24:06
okay so let's create another item I mean this container
1:24:13
actually I can duplicate all of them
1:24:21
and I'm gonna change this subtitle and title
1:24:27
okay we already use them let's change here the second one
1:24:36
we don't need this
1:24:42
and this main title okay so let's get rid of those images
1:25:00
let's see okay perfect and between them I'm gonna create
1:25:06
another container and it's gonna be our categories again title subtitle and our
1:25:13
categories container and it's going to include different categories
1:25:18
so I'm gonna come here
1:25:25
I will duplicate this it's gonna be discovered by topic
1:25:34
categories
1:25:39
and after that let's create our category list
1:25:48
and I'm going to be using link so we can click
1:25:53
and open up the blog page just like this I can give here any
1:25:58
category name and I will say Style and again
1:26:04
class name Styles category item
1:26:13
and one more the category name
1:26:21
so let's create more I will duplicate actually I can drag copy paste
1:26:27
there is nothing important here we have other items and their class
1:26:35
names of course it's a huge component you can split them let's actually do
1:26:41
that I will say menu posts
1:27:00
like that and I can take here any props that we
1:27:06
can fetch data and also we can add here with image or not
1:27:13
that's actually at this here and
1:27:20
I will come here and copy this items
1:27:30
I will cut
1:27:35
and paste here that's import link and image
1:27:42
of course we don't have any image so I can actually
1:27:48
copy the other one
1:27:59
like that and I can write here condition
1:28:07
if it's with image
1:28:15
let's do the same thing for others
1:28:30
okay right now I can use this component here
1:28:37
and I'll say with image true and
1:28:43
this one and it's going to be false as you can see it's exactly the same of
1:28:50
course I can take this style and
1:28:58
paste inside my component Style there's our menu post here
1:29:07
I like that okay nothing has changed perfect oops
1:29:14
it's not ours okay there's a problem because we don't have styles
1:29:20
many posts import styles from
1:29:25
many post module CSS posts
1:29:34
okay perfect it works as you expected so you can do the same thing for
1:29:43
those category lists I will copy here
1:29:50
actually I will cut and create new component menu categories
1:30:04
and I will paste it here let's import the link
1:30:09
and finally I can create my CSS file
1:30:17
let's copy this and paste it
1:30:28
okay so I can close here we have only titles
1:30:36
and I can use this module let's see
1:30:44
we are gonna do exactly the same thing as we did here remember different colors
1:30:50
so firstly I'll say category item actually let's start with this list
1:30:57
firstly I will give my margin 35 and 60.
1:31:07
and it's gonna be display Flex Flex will be drop so when we showing the page our
1:31:13
items will be spread to other lines and capital B20 now for each item
1:31:22
I'm going to give some padding from top and bottom left and right I will give border radius
1:31:31
and font size will be 14. of course we didn't call our component
1:31:38
let's call menu categories
1:31:46
perfect and let's give our colors here I will drag the paste
1:31:53
and perfect it's that easy let's open up this dark mode
1:32:01
it looks really nice and what else
1:32:09
let's create those buttons if you remember
Pagination Button Design
1:32:16
we have a component for those buttons I will create here two individual button
1:32:25
Styles dot button another one and the first one will be previous page
1:32:32
and the second one will be next page oh what's this third one let's remove and
1:32:40
let's give Style I will just say display flex and I'm
1:32:46
gonna separate them using justify content space between
1:32:52
and I'm gonna make them red and give some padding
1:33:01
100 pixels I'm gonna delete the Border let's give our padding and background
1:33:08
color text color will be white and cursor will be pointer
1:33:17
that's all and finally let's take care of this footer we have two sections left
Footer Component Design
1:33:24
and right side and it includes this div logo and title
1:33:30
any description here and social icons and for the right side we are going to
1:33:36
have items and each item includes a title and some links
1:33:43
let's do that I'm going to close them and open up my footer the first one will
1:33:49
be information and the second one will be links and inside we are going to have
1:33:56
logo container which includes our logo
1:34:03
let's say logo.png
1:34:09
I'm gonna give some width and height it's going to be 50
1:34:14
so I don't have to create any container in which container and after I'll say H1
1:34:19
tag and Lama block
1:34:24
let's say logo text and after this deal we are going to have this text let's
1:34:31
create a P tag and paste here and its class name will
1:34:36
be description and finally icons
1:34:56
18 pixels and others
1:35:11
finally this site I'm gonna create a list
1:35:20
and it's going to have a title let's say links and after
1:35:27
different links here home page
1:35:34
three more
1:35:41
and I'm gonna give class name for this link because its weight will be a little bit different let's say at least title
1:35:50
and finally I'm gonna duplicate this it's going to be tags
1:35:56
social
1:36:16
okay let's see we are ready to give our style
1:36:23
let's open up here and firstly I'm going to give some
1:36:28
margin margin top and I will say display Flags justify
1:36:34
content space between and color will be soft text color
1:36:42
okay there is no space here let's give some padding 20 to 0
1:36:49
and after that let's start with this info
1:36:54
actually I will give Flex one and not pass the other one links
1:37:03
and again display Flex Flex Direction column and gap between each item will be 14
1:37:10
pixels like this now for this logo container
1:37:24
I'm gonna give some Gap for the logo text
1:37:31
font size will be bigger okay and for the description I can
1:37:37
decrease font weight
1:37:43
it's going to be lighter and finally those icons I will give some space by
1:37:49
the way I can give some margin here maybe
1:37:57
let's say 10 and after Gap okay
1:38:03
and what about here let's check our example as you can see it starts from
1:38:08
here so I will say display Flex
1:38:14
just file content flex and for each list
1:38:21
is going to be vertical
1:38:26
yeah will be 10 phone paid 300.
1:38:32
okay let's give some space between them
1:38:41
like that and for those titles remember we have list title
1:38:48
I will just say font weight Bolt
1:38:54
perfect and again I forgot responsive design for this part
1:39:00
let's take care of this footer first and after we can take care of here we are just gonna remove this menu and I will
1:39:07
say if it's smaller than 10 24 I'm gonna decrease this space by the way they are
1:39:13
not vertically centered display Flex align item Center
1:39:21
and let's create our media query
1:39:26
1024 links cap will be let's say 50.
1:39:34
oops I forgot writing and perfect
1:39:40
and if it's smaller as you can see this space is not enough
1:39:46
anymore in this case I'm gonna make this container Flex Direction column
1:39:51
let's duplicate for the container
1:39:58
for extraction column and gap between items will be 30.
1:40:05
and I can separate those items just five content space between
1:40:15
okay it's not a hundred percent
1:40:23
okay perfect maybe I can increase here let's say 50.
1:40:31
and if it's even smaller
1:40:37
I'm just gonna decrease this size font size
1:40:45
let's remove here
1:40:55
okay and what about here
1:41:00
let's shrink okay there is no problem
1:41:06
and if it's small firstly I'm gonna delete this image
1:41:12
let's open up cut module
1:41:22
1280 image container will be display not
1:41:32
okay and if it's smaller I'm gonna delete this menu I will copy
1:41:38
this and open up my menu menu module
1:41:47
if it's 10 24 container will be displayed no
1:41:53
perfect we have only our items
1:42:00
awesome
1:42:11
it looks really nice
1:42:17
so we've finished our home page so let's take care of
Blog Category Page Design
1:42:23
our category page it's really easy we are not gonna do anything different
1:42:29
Let's see we have again our card list this menu we are just gonna add this
1:42:34
title that's all so let's create our page I will close everything here
1:42:40
and inside app directory I'm gonna create my page and it's gonna be block page
1:42:50
log page or category page whatever you say I will see log page module
1:42:58
CSS
1:43:10
okay I will just add here a title style block this title is Gonna Change
1:43:17
according to our search query for example category will be
1:43:22
part and it's going to be Sport and this color will be different
1:43:28
let's give class name and after that remember our home page
1:43:37
I will create here a Content div and inside I'm going to add my cart list
1:43:45
and menu we are gonna take our search parameter
1:43:52
and pass it to our cart list and it's going to take that parameter and make a
1:43:57
fetch request and show all these items so I'm just gonna make this contact display flex and
1:44:04
I'm gonna add a style for this title that's all let's open up
1:44:13
I said container is going to be styles okay
1:44:19
as you can see they are not horizontal actually we don't even need this
1:44:25
container I will just say title and content and it's going to be display Flex cap
1:44:32
will be 50. for this title
1:44:38
background color will be let's say Coral color will be white I'm going to give
1:44:45
some padding from top and bottom left and right and text align will be Center
1:44:52
oops sector and that's all
1:44:57
this is how easy to create websites using reusable components
Single Post Page Design
1:45:06
and what about single page when I click here it's going to open up any page here
1:45:13
and it's going to show our single post of course we don't have our page let's
1:45:18
create inside app directory remember how we are doing this I will say square
1:45:24
brackets and inside you can write post ID post like whatever you want but I'm
1:45:30
gonna use slack because it's important for SEO instead of writing here any random post
1:45:38
number we are going to show our title
1:45:43
and using this title biograph hatch our data
1:45:48
let's create our page
1:45:53
single page let's create module
1:46:00
I will copy this I'll say container
1:46:07
and here
1:46:13
and call this style here
1:46:20
okay as you can see it's here by the way I'm changing this dark and light mode all
1:46:26
the time I hope you are not watching this at night I'm so sorry actually
1:46:31
let's make this dark and let's open up
1:46:39
any slack here and as you can see we are gonna have our title user information
1:46:44
and image and again we are going to create content div and we are going to add another
1:46:51
section here but this site will be again our menu
1:46:56
let's do that actually let's close everything here and
1:47:01
open up so let's remove this and create another container I will say info container
1:47:10
and after we are going to have the content which includes our post
1:47:17
and menu remember its Flex 2 is going to be Flex
1:47:22
5. so let's start with this info container
1:47:28
we are going to have text container image container and text container includes this title and user div
1:47:41
in which container
1:47:48
I will say fill and I will give class name so I can apply object fit
1:47:54
and inside here let's create title and user div and again another image
1:48:03
here let's move this here actually let's give
1:48:10
our example
1:48:17
and user text container
1:48:22
and we are going to have here our username and date
1:48:37
okay let's separate our container and give
1:48:43
here a width and height so we can see our image I will move this here
1:48:49
and I will say info container align item Center and gap between image
1:48:56
and text will be 50 pixels I will say tax container Flex one
1:49:04
an image container Flex one
1:49:12
and I'm going to give here height and Position will be relative let's give quickly
1:49:18
object fit okay it's still here
1:49:24
now that's because of this image container blow text container I will just give 50
1:49:31
pixels and right now I will increase this title
1:49:37
size and give some margin here let's say 64 margin button
1:49:45
but I didn't give a class name
1:49:52
okay for this user it's going to be display flex and for this information it's going
1:49:59
to be displayflex again but Flex Direction color
1:50:11
and inside this image container we have our image let's say Avatar
1:50:18
and change this class name and I will say border radius 50 percent
1:50:26
and of course object fits for this text container
1:50:35
display flags flag extraction column gap between items will be 5 pixels
1:50:43
and color will be soft let's say bar soft text color
1:50:52
okay maybe let's increase this size and weight
1:51:01
and perfect right now I can create my description and this comment section
1:51:08
actually we can create here another component for those commands but before
1:51:15
let's separate them that content and this menu remember
1:51:20
we have contact here let's play Flags
1:51:27
Gap and that's all and after that inside this post I'm going to create my
1:51:33
description let's just create some random text actually I can create more P
1:51:38
tag so basically I'm gonna need another do and it's going to be a description
1:51:45
and inside this div I can create my content my texts
1:51:51
headers or whatever
1:52:03
it's too small okay
1:52:08
as you can see I forgot giving Flex for my content for this post
1:52:18
Flex will be five because its Flags is two and I can give
1:52:24
some margin top pixels I want to increase this font size it's
1:52:31
too small description and P tag inside I'll say font size 20
1:52:40
pixels font rate will be 300.
1:52:45
and I can give margin between P tags
1:52:52
finally our comments to do that I'm gonna create new component but before
1:52:57
let's take care of this responsive design actually we can do it after comment section I'm going to
1:53:05
close them inside components commands
1:53:25
thank you styles from commands modules CSS
1:53:35
okay let's call it in our single page
1:53:42
after this view I will say comment and inside this div I call my component
1:53:52
and let's come back here and let's see what we are gonna need
1:54:00
firstly we are gonna need this title after that we are going to create a div which includes this input and button but
1:54:07
be careful if we are not logged in we are not supposed to see this container so again I'm gonna write a fake status
1:54:15
and using that status I'm gonna write a condition and after that we are going to
1:54:20
write our comments we are going to have a list and each individual command let's
1:54:26
create this title first
1:54:32
and let's create here status
1:54:37
authenticated and I will write my condition status
1:54:45
equals authenticated show here a container if it's not let's call here a
1:54:51
link and I will say login to write a comment
1:54:57
href and login page and here
1:55:03
I'm going to create a new let's say right and inside
1:55:08
by the way let's import this and actually let's create a text area I'll
1:55:14
delete those I will give a placeholder write a
1:55:19
comment and class name will be let's say input let's make this
1:55:27
self-closed and after that a button
1:55:37
okay and after that let's create commands list
1:55:42
I'll say comments and a single comment and inside this we are going to have
1:55:51
our user div it's exactly the same and description
1:55:58
so let's create user which has an image and user information
1:56:19
I'm going to give my class names and let's give our source
1:56:27
width and height is gonna be 50 pixels
1:56:33
finally after this user I will just create my description
1:56:44
and let's give a style and after we can create other comments
1:56:51
I will take this here and firstly let's give here margin top
1:56:58
and after title this title I'm going to change its color
1:57:04
it's gonna be soft color
1:57:10
margin button 30 pixels
1:57:15
like that and for this div remember right
1:57:22
display Flex align item Center just file content space between
1:57:31
now for the input padding 20 with a hundred percent
1:57:37
perfect for this button I'm gonna give some padding for the
1:57:43
radius color will be white background will be this green color
1:57:52
padding background color will be teal
1:57:58
text color will be white it's gonna be bold
1:58:03
I'm going to delete the Border and Border radius will be 5 pixels
1:58:09
that's a cursor pointer awesome and what about this user
1:58:18
actually we did this before I'm just gonna write quickly display Flags online item Center
1:58:24
gap between image and text and I will say margin bottom because I want to give space here
1:58:36
for this image I'm gonna make it Circle
1:58:43
and object fit what about this user info it's going to
1:58:51
be vertical remember
1:58:56
let's give gap between them color will be soft
1:59:06
and for the username font weight will be bigger where is our username here
1:59:14
font weight 500. now for date
1:59:22
so what about this description
1:59:27
I'm going to increase the font size and decrease default weight like that
1:59:35
and there is no space here let's give
1:59:40
after this right container remember we have commands and command
1:59:48
this is our main deal comparative I'll say 50 and for each command again margin
1:59:58
bottom if you want to you can use display Flex for extraction but I directly give margin button oops
2:00:07
of course top not bottom okay let's create other commands
2:00:14
for the design purpose and let's see it looks pretty nice
2:00:21
so what about responsive design
2:00:27
as you can see there is no problem here but actually I can decrease this size at
2:00:35
the very beginning there is no problem but after the first breakpoint
2:00:40
it's still too big let's actually open our page style here
2:00:50
single page and commands Okay
2:00:57
let's click create media screen
2:01:03
the biggest screen is going to affect our title and font
2:01:10
size will be 54. okay
2:01:17
when it's smaller it's going to be much smaller
2:01:23
other breakpoint let's say 48
2:01:29
and for other one let's see first
2:01:38
actually for other one I can drag the remove this image so I'll say
2:01:44
image container and display no
2:01:49
like that perfect
2:01:55
and for here I can decrease a little bit more and this is too big also
2:02:06
so let's say title font size 36.
2:02:12
and description 18. okay it's still big
2:02:19
okay it's description and of course P tag
2:02:26
okay perfect I have all the comments
2:02:32
as you can see there is no problem
2:02:39
I don't have to change anything
2:02:44
it looks really nice
Next.js Login Page Design
2:02:50
okay so what about this login page as you can see it's acting like it's a
2:02:57
single page because we didn't create our login page let's close them
2:03:03
inside app directory I will say login page
2:03:09
jsx I will say login page
2:03:14
and module
2:03:27
styles from this login page
2:03:38
okay firstly I'm going to create another div it's going to be wrapper basically it's
2:03:45
going to be a small box that I will Center inside this container and inside I'm gonna just create three
2:03:53
divs and that's a social button
2:04:00
it's gonna be Google GitHub
2:04:07
and what else it can be let's say Facebook and let's give different class names
2:04:16
or we can directly use first child second and third child doesn't matter
2:04:21
let's do it like that so let's come here and I will say
2:04:26
display Flex align item Center justify contact center
2:04:33
so our books will be centered let's give margin here
2:04:42
okay and for the wrapper I'm gonna give a background color
2:04:53
let's say soft color so PG
2:04:59
like that of course we don't have any padding and we can't see it
2:05:05
let's give a hundred for each item I'm gonna give some Gap
2:05:16
maybe I can increase this padding and give more space for left and right
2:05:27
okay and Border radius let's say time picks us
2:05:34
so what about those items social button
2:05:43
I will do padding border radius will be 5 pixels
2:05:49
border known and background color actually I'm going to give different
2:05:54
background color for each one let's say color white
2:06:00
font fate will be bought and we can click on them and for the
2:06:06
first item first child
2:06:14
it's going to be a Google button so a background color will be something orange
2:06:22
let's try this one okay awesome by the way I can Center my
2:06:29
items justify content Center okay perfect
2:06:35
for this one it can be black Maybe so actually let's use and child is going
2:06:43
to be second child and I will say black
2:06:48
okay there is too much space I'm gonna decrease it but for now it can stay I'll
2:06:53
say Facebook I mean the third child or you can directly use
2:07:00
last child okay and maybe I can soften this
2:07:10
and okay it's gonna be let's say 50.
2:07:17
okay it looks nice there is nothing fancy let's check the responsiveness
2:07:25
as you can see the padding is too much for this point I can decrease
2:07:35
media query
2:07:40
our breakpoint and wrapper will be what was our padding
2:07:48
okay maybe 50 and 100
2:07:54
perfect if I get more maybe I can decrease this font size
2:08:04
and this padding again so if it's 640
2:08:11
padding will be let's say 30 pixels like that
2:08:17
and I can decrease this don't wait
2:08:25
font size okay perfect
2:08:32
and we have one more page to create if we
2:08:37
are logged in let's open up our authentication link component
2:08:44
and it's going to be authenticated and as you can see there's a right page
Add New Post Page Design ([Medium.com]( Editor Clone)
2:08:50
so let's create this page inside app directory I'll say right
2:09:09
module dot CSS by the way we are creating page not component be careful
2:09:14
here it has to be page and let's call our style
2:09:28
module.css actually let's see right page
2:09:34
so it will be easier to find
2:09:49
okay so let's see what we have here as you can see it's just like medium.com we
2:09:57
have an input here that we can add our title and we can write our text here and
2:10:04
the best thing is we can select any text here and as you can see we have some options we can make it bold we can add
2:10:12
here any link I'll enter as you can see it's here
2:10:19
or I can make it bigger I can add here any code
2:10:25
and here we have a button that we can add any image external image or a video
2:10:32
everything is minimal everything is pretty clean and we have a button here that we can publish our post so let's
2:10:40
create this inside my container I will create my input after that we are going
2:10:46
to have a container that contains this button and this text editor let's do
2:10:52
that I will come here and say input
2:10:58
I will give placeholder and it's going to be title let's create our editor
2:11:04
we are going to have a button here last name will be button
2:11:10
and inside I'm gonna have an image basically it's going to be this plus
2:11:16
which and after we are going to create one more container that contains those green buttons and each button has
2:11:24
different images inside okay
2:11:30
I will say plus PNG let's give size by the way let's import
2:11:37
this and before creating other buttons I'm
2:11:44
going to create here a use state that because we are not going to see this container
2:11:50
at the beginning we are going to open that container only when we click here we can open or close
2:12:00
open set open use state and it's going to be false and I will
2:12:07
say if it's open create here edu and it's going to be let's say add
2:12:14
and inside this we are going to have three buttons I'll say image external
2:12:22
video let's change their class names I'll say add button because they are going to be
2:12:29
green and after that finally we can create our text area
2:12:35
but we are not gonna use directly html text area by the way we are going to
2:12:40
make this component a client-side component and to create this Editor to give all
2:12:48
these HTML elements we are gonna need a library it's a great Library let's open
2:12:53
up our terminal and I will say yarn at
2:12:59
react Queen
2:13:04
okay let's make this use client
2:13:11
I'm gonna add here my library and its CSS file it's inside our library but we
2:13:18
have to import this otherwise we cannot see its Style
2:13:24
and let's use it after this I'll say react quill I'm
2:13:30
gonna give here a team name and it's going to be bubble and when we change our text
2:13:36
we should set it somewhere so I'm going to create one more State and it's going to be value
2:13:45
at the beginning is going to be an empty string when we change our text we are going to update this state
2:13:52
firstly let's say value equals value and on change event will be changing our
2:13:59
state I can give any placeholder here tell your story
2:14:06
let's see our text editor is here but we cannot
2:14:12
see it if you come here and inspect your HTML element
2:14:17
you are going to see that our editor is inside Cloud container and editor so
2:14:25
basically we can open our Global CSS and edit any of these classes let's open up
2:14:31
Global CSS and I will say Quail container
2:14:38
firstly I'm going to increase its size and finally I'm gonna change the color
2:14:44
of placeholder to do that I'm going to say quill and inside container
2:14:51
coil editor growl blank again I'm not memorizing anything I'm
2:14:58
just inspecting and finding what I need so don't worry about here
2:15:05
I'll say before and I'm gonna change its color
2:15:11
it's going to be this gray color just like this but we couldn't apply here let's make
2:15:19
this important uh perfect
2:15:25
awesome it works so let's give a style for others firstly
2:15:30
when I click here I'm going to open up my div let's close here and I will say
2:15:38
on click event and set open will be the opposite of
2:15:44
open just like this okay we are ready to give Style
2:15:52
let me make this bigger firstly I'm gonna make this editor
2:15:59
display Flex gap between that button and our editor
2:16:05
will be 20 pixels and let's give a height okay it looks weird but we are
2:16:11
gonna handle that we don't have any width right now let's give a style for our editor here I'll say class name
2:16:19
Styles dot let's say text area
2:16:25
I can give additional class name and I will say a hundred percent okay
2:16:32
so what about this button we have a button and add button their
2:16:38
style will be same but for those buttons additionally I'm gonna give a color so
2:16:44
let's come here and say button add button
2:16:49
I'm gonna give a size it's going to be a circle
2:16:55
let's delete those background colors transparent I'm gonna give border and
2:17:02
it's gonna be one pixel solid and text color
2:17:08
let's enter our images just like this
2:17:15
of course we can click here so I'll say cursor pointer
2:17:21
and for those buttons border color will be
2:17:28
this green color just like this let's give a style for them
2:17:39
I will say display flex and gap between items will be 20 pixels I'm gonna give
2:17:45
background color is going to be PG and its Position will
2:17:50
be absolute because it's going to be over our editor
2:17:55
and as you can see our text is over this deal to prevent this I'm going to give c
2:18:02
Index and let's give it
2:18:08
and I'm gonna give left it's not showing up somewhere here
2:18:13
because we didn't give position relative for the parents
2:18:19
and perfect so what about this input did I give you class name or not okay
2:18:26
let's give Styles dot input
2:18:36
I will give a really big padding and font size will be 64 pixels I'm
2:18:42
gonna delete the Border and outline
2:18:49
and the background color will be transparent just like this so let's change this
2:18:56
placeholder it's going to be exactly the same color foreign
2:19:02
placeholder color will be our gray color
2:19:12
and finally I can create here a button that we can
2:19:17
submit our post I will say publish and class name will be
2:19:23
Styles dot publish let's write it here again it's going to be absolute
2:19:29
positioning I will say top 30 right 20. let's give
2:19:37
some padding round top and bottom left and right and I'm going to delete the
2:19:42
Border like that let's give a background color
2:19:51
and the text color will be white and finally cursor pointer okay I can
2:19:58
give both the radius okay perfect
2:20:07
right now we have our pages and components and we are ready to communicate with the backend API
Next.js API - MongoDB - Prisma Structure
2:20:15
our API will be connected to a mongodb
2:20:22
to do that we are going to use Prisma orm it allows us to create our database
2:20:28
schema and make route operations and the best thing is you can use any database
2:20:34
provider like postgres MySQL or whatever you want because thanks to Prisma the
2:20:40
syntax is independent of any database we will send an API request and the API
2:20:48
route is going to take the request and pass it to Prisma and it's going to make the database
2:20:54
query let's say find a post by ID and it will get the result and send it to our
2:21:01
API and we will get the response
2:21:07
let's see which tables we are going to use for this database
2:21:16
I'm gonna paste my schema as you can see we will have a user table
2:21:22
and a user can have multiple posts and comments and in the same way a post can
2:21:29
have multiple comments but each post has only one category
2:21:34
of course you can change here you can make the relation many to many
2:21:40
so let's create our API route and complete the database connection
2:21:48
right now our design is ready let's create our API and hatch all these data
2:21:56
and add new data using this component but before that we should handle our
2:22:02
Authentication if we are not authenticated we won't be able to see this page
2:22:08
okay I'm gonna come here and close everything and let me explain what we are gonna do
2:22:16
so I'm going to open up the official website of authjs and let's get started
Next.js Authentication Tutorial (Auth.js)
2:22:24
I'm gonna choose oauth Authentication and here
2:22:30
firstly we are going to install our library I'm going to open up my terminal
2:22:36
yarn at next auth and after that in the API folder we are
2:22:43
going to create this auth folder and after we are going to create our route but this page was prepared for next.js
2:22:50
pages that we are using App router so instead of this file we are going to
2:22:56
create one more folder and after we will create our route file let's open up app folder and I'm going
2:23:03
to create my API and inside I'll say auth
2:23:09
one more folder is going to be next off why we are using it like that because we
2:23:16
don't have to create all of these endpoints one by one we are
2:23:22
just creating our next off endpoint just like this and it handles all these sub
2:23:28
endpoints and inside this folder let's create our
2:23:33
API route and inside as you can see we are going to create
2:23:39
our next auth function and we will add all the providers that we are going to
2:23:45
use in our example we will use GitHub provider and Google provider
2:23:50
let's paste this here and I'm going to add one more and it's going to be Google provider
2:24:02
let's import that okay of course you can write all your
2:24:10
options here but I prefer creating another file
2:24:15
let's open up our utilities okay we didn't create let's create
2:24:25
and inside I'll say auth.js and I'm gonna write all these options
2:24:32
here let's cut this
2:24:37
and I will say export const options
2:24:43
like that and let's import them
2:24:51
okay I can call this here and let's wrap our application with
2:24:58
our next auth provider to do that I'm going to open up my providers folder
2:25:04
new file and I will say auth provider
2:25:10
let's create our function it's going to take a children
2:25:18
just like this and I'm going to write here session provider
2:25:25
and it's going to come from next auth react of course it's a provider it's gonna be
2:25:32
use client and let's use it in our layout
2:25:39
somewhere here
2:25:45
let's import okay
2:25:52
and there's something wrong here because we didn't import
2:25:57
it's not warning me there is something wrong with my settings okay anyway
2:26:06
let's see I'm gonna open up my login page
Next.js How to Sign in with Google
2:26:11
and I'm gonna try to login with Google to do that we are going to need some configuration
2:26:17
I'm going to open up cloud.google.com let's open up console
2:26:24
and in this console if you don't have any project just create a new project and after choose apis and services and
2:26:34
here I'm going to choose credentials and I'm going to create a new credential
2:26:39
it's going to be all off application type will be web application
2:26:45
you can give any name here I will say block app
2:26:51
I'm going to add my URL localhost 3000 but remember when you deploy your
2:27:00
application you have to change this URL you are going to see at the end of the
2:27:05
video and here again localhost 3000 but I'm
2:27:10
going to write here my endpoint it's going to be API auth and callback and
2:27:16
Google our API route off and as you can see it handles this endpoint
2:27:23
we didn't have to create here anything this is why we are using this folder
2:27:29
and I'll say create and as you can see we have a client ID
2:27:34
and client secret let's copy them and open up our EMV file we don't have
2:27:41
yet let's create let's close this Source folder
2:27:46
make sure that you are creating in your route not inside source folder
2:27:51
I will say dot EMB and I'm going to paste my client ID and let's remember
2:27:57
what was the name Google ID and Google secrets
2:28:07
and one more is going to be secret
2:28:13
and I'm gonna paste here my client Secret so let's open up our login page and see
2:28:20
what's gonna happen I'm gonna come here and say
2:28:25
const data and status I'll say use session hook
2:28:33
and let's console log this data and status
2:28:39
and when I click on this Google button on click event I will say
2:28:45
sign in as you can see there's a function it comes from next or react by the way
2:28:52
equals and I'm gonna write here my provider name as you can see there are many
2:29:00
options but we are going to be using Google
2:29:05
by the way we are using use session hook in this case our component should be a
2:29:10
client component use client I'm going to open my application and my
2:29:18
console and as you can see there is a problem here and it says you should add next
2:29:25
auth URL to your eme file let's add that
2:29:33
it's going to be our localhost and the port number and also I'm going
2:29:40
to add here next of Secrets and we are using this secret ID to
2:29:47
create session tokens you can write here any random ID for now let's say my
2:29:54
secret ID of course you should generate a complex secret but for now for the
2:29:59
tutorial purpose it can stay like that and that's all by the way if you are using
2:30:06
next.js route you should provide here which method you are using you can use get method pause method put method but
2:30:13
to take the request you should provide this first for the authentication we are
2:30:19
going to be using both get and post methods so actually right here const Handler
2:30:29
and I'm gonna export this as get methods
2:30:36
and as post methods normally when we create a route
2:30:41
we are taking our requests just like this export
2:30:46
for example post methods and we are taking any request making some operations and returning a
2:30:54
response but in this case our library is going to handle everything for us we
2:31:00
don't have to create get and post methods one by one and let's check
2:31:06
I'm gonna refresh the page as you can see by the way I forgot
2:31:12
deleting this let's open up team toggle
2:31:17
and remove that and as you realize at the beginning our
2:31:24
data is undefined and the status is loading and after as we didn't log in
2:31:30
our data is now we don't have any user and the status is unauthenticated but if
2:31:38
I click here and authenticate I'm going to choose my account here
2:31:48
and as you can see we have an user here and it has email image and name and the
2:31:57
status is authenticated right now even if I refresh the page my user will stay
2:32:02
and when I click on this button we are gonna log out so let's open up our
2:32:08
component remember it's here when I click on this button
2:32:14
I'm gonna call sign out function here let's try
2:32:20
I'll click as you can see this is what I want so what I want to do is using this
2:32:27
status and restricting my login page if I'm authenticated if there is a user
2:32:34
we shouldn't see this page anymore so let's close everything and open up
2:32:40
login page Now using this status I'm gonna write here a condition
2:32:46
I'll say if status is let's use loading first if it's loading return
2:32:54
including two and I'll say just loading you can give any style for this
2:33:02
and one more and I will say if it's authenticated
2:33:07
we shouldn't see this page anymore and we are going to be redirected to home page to do that we are going to need use
2:33:14
router hook I'll say const rather use router
2:33:20
but it's gonna come from navigation because we are not using next.js Pages
2:33:27
anymore using this rather I'm going to push my
2:33:32
user to the home page as you can see there is no problem we
2:33:39
can see this page but if I click here and login as you can see we are in the home page
2:33:46
okay perfect right now we have user in our client side but we are not actually
Next.js MongoDB Prisma Tutorial (App Router)
2:33:52
storing that user anywhere let's create our user in our database using mongodb
2:33:58
and Prisma to do that I'm going to open up cloud.mongodb.com and I'm going to
2:34:04
create a new database I'm going to choose the free version you can choose any provider here and you can
2:34:11
choose wherever you want and the cluster name will be cluster0
2:34:18
let's create no I hate this
2:34:26
okay I'm gonna write here any username Lama Dev it's going to be exactly the same
2:34:33
create user and here when you deploy your application you should add here
2:34:39
your server address but for now for the testing purpose I'm gonna write here
2:34:44
four zeros and it means allow anywhere so we will be able to reach our database
2:34:51
from any IPA address but it doesn't mean everyone can read and write any data
2:34:57
they don't know our username and password okay let's finish and close
2:35:03
let's click on connect I'm going to choose drivers and it's going to be node.js application
2:35:11
you can install mongodb and make your crude operations using this but we are
2:35:16
going to be using Prisma so I will just need this URL let's open up our eme file
2:35:23
we are hiding all our secrets here I will say bongo and it's going to be this
2:35:29
URL I'm gonna add my password it's gonna be lamadev and I'm gonna write here any
2:35:35
database name let's say block right now using Prisma and this URL I'm gonna add
2:35:42
my user to my database let's open up our documentation
2:35:48
and okay it's not here I'm going to open up the old documentation
2:35:57
okay it's here as you can see there are many options but we are going to be using Prisma
2:36:05
to do that we are gonna need those libraries I'm going to open up my terminal and
2:36:12
install that of course yarn add or npm install
2:36:20
and finally this Prisma
2:36:26
okay during this process let's see what we are gonna need as you
2:36:33
can see when we create our authentication function only thing I should do is add here a Prisma adapter
2:36:40
and after that in the Prisma schema we should add our
2:36:46
models like account session user and token I recommend you copy and paste
2:36:52
this schema directly that because this adapter is gonna handle our user
2:36:58
accounts and tokens automatically we don't have to do anything for example in
2:37:04
our application when I log in with Google log out and login with another provider
2:37:11
and if you are using the same email you don't have to create a new user this
2:37:17
adapter is just creating a new account as you can see there's a provider
2:37:23
property here and it stores all our providers here it's not creating new
2:37:28
user and it handles all these sessions and verification tokens so let's create
2:37:34
our Prisma schema and add them there I will say yarn at Prisma
2:37:42
and I'm gonna copy here
2:37:50
as you can see we have a database URL we are going to add our mongodb URL here
2:37:57
let's initialize our Prisma first I will say MPX Prisma in it and I can add here
2:38:05
my database provider I will say data source provider
2:38:11
and it's going to be mongodb let's open up our menu and as you can
2:38:18
see we have a new folder here it automatically creates this folder and this schema and inside as you can see we
2:38:26
have our client and database and we should add our database into this
2:38:31
URL let's open up our eme as you can see it just added by itself I'm just gonna
2:38:37
change this URL remember it's here
2:38:43
that's paste and I can't delete here and this
2:38:49
okay right now I can paste my code okay we
2:38:54
already have our client and DB I'm just gonna copy and paste here
2:39:05
and as you can see there is a problem here because we are using mongodb and it
2:39:11
stores IDs with this underscore if you are using any other database probably
2:39:17
they are just using ID but if you are using mongodb you should use this
2:39:22
annotation for your IDs and we don't need those texts I'm going
2:39:29
to delete them but before let's add them here and this
2:39:35
is our ID in this case I will say first ID and after map ID okay
2:39:42
let's delete those and that's all
2:39:50
Let's test I will log out
2:39:56
by the way it's not changing that because we didn't write our condition
2:40:03
if you remember we are using this temporary status right now we don't need that
2:40:09
I'm just gonna use use session hook
2:40:16
like that and it's not not authenticated it's going to be unauthenticated
2:40:25
and as you can see our login button is here but before
2:40:30
let's add our adapter let's see here as you can see we are
2:40:38
gonna need this adapter and we are going to add our Prisma client
2:40:44
that's important just like this
2:40:51
and I'm going to generate my prismas schema to do that I will say MPX Prisma
2:40:58
generate if you are using any relational database
2:41:06
you should use MPX Prisma migrate and if you are using mongodb you should
2:41:11
generate your models first let's check by the way instead of using this please
2:41:19
my client again and again because we are going to make a lot of crude operations and we shouldn't create multiple clients
2:41:27
to prevent this I'm going to be using this code
2:41:32
basically if we are in the development mode it's going to check whether we have
2:41:38
created our client before or not if we have created it's gonna use it it's the
2:41:44
typescript version I'm going to create the JavaScript version let's open up our utils and inside I'll say connect
2:41:54
and I'm gonna paste it here you can find this code in the GitHub repository right
2:41:59
now I'm gonna use this Prisma function
2:42:06
like that and let's try I'm gonna refresh
2:42:15
let's sign in okay let's check here
2:42:21
I'm gonna refresh the page
2:42:27
and as you can see we have a database and inside we have account session and our user
2:42:36
name email and image perfect as you can see it uses underscore
2:42:44
and we can use this dashboard but there's an awesome feature of Prisma
Prisma Blog App Schema Example
2:42:50
let's open up new terminal here MPX Prisma Studio
2:42:57
in this address we are going to have our Prisma Studio
2:43:03
as you can see let me zoom in perfect
2:43:09
so what else we can do I can do the same thing for writing page
2:43:17
I'm going to open up right page and paste it here
2:43:25
of course they can't be conditional I'm gonna move this here
2:43:32
and let's import them next navigation and use session
2:43:39
okay we don't need data right now I'm going to close everything here and I'm gonna create my other
2:43:47
models so I'm going to scroll all the way down and here firstly I'm gonna
2:43:52
create my category model and it's going to have an ID and it will
2:43:58
be a string I will mark this as ID and by default I'm going to generate a new
2:44:05
ID using this method it's going to create a unique ID and remember if you
2:44:10
are using mongodb you should add here underscore ID and each category has a
2:44:16
slack it's going to be a string and unique make sure that it's Unique
2:44:21
because we are going to use it in our posts and let's say title string and we are
2:44:29
going to have some images actually it's not required I can write here question mark and we are going to
2:44:36
have some posts but we don't have our post model yet let's duplicate this and I will say post
2:44:44
model it's going to have ID slack title and we are going to have a description
2:44:50
image and let's say views it's going to be an integer
2:44:56
and by default it's going to be 0 and when we visit our post
2:45:01
in our browser we are gonna increase this View and right now we have post we
2:45:06
can edit here and I will say post array in this case I can add my category here
2:45:13
let's say cat is going to be category and I'm going to add here a relation and
2:45:20
I'm gonna connect my post model and category model so how I'm gonna connect
2:45:25
them firstly I'm going to create here a cat Slack and it's going to be a string and I can
2:45:33
check this cat slack and this slack and if they are equal it means they are
2:45:38
related so I will say Fields is going to be cat slack and the reference inside
2:45:44
this category will be slack okay and right now each category can have
2:45:51
different posts and each post has only one category and also each post has a
2:45:59
user I will do the same thing here I'll say user email
2:46:05
we are going to use this email because remember when we login inside our data
2:46:11
we have our username email and the user image we can directly reach that email
2:46:17
using use session hook this is why we are not using user ID and
2:46:23
I will say user is going to be user relationship
2:46:29
we are going to check the user email and the reference will be email
2:46:34
and there is a problem here because the Foreigner key is not unique let's come
2:46:40
here okay it's Unique but it's not required every user has to have an email
2:46:47
and it has to be unique
2:46:53
okay and what else let's create our comments
2:46:59
I will say command again ID you don't need slack we are
2:47:07
going to need a title actually let's say description not title we don't need any image or views
2:47:15
we don't have any category we are gonna need a user and also we are
2:47:21
gonna need our post so I'm gonna duplicate here and we are going to check the post Slack
2:47:31
pause slack and it's going to be Slack
2:47:37
let's check here right now I can add my comments it's going to be command array
2:47:47
okay there is a problem because I said user is going to be paused
2:47:54
okay each user can have a post list and
2:48:01
comment list and each post can have some comments
2:48:09
and also we can add here created add date because we are going to need it I
2:48:14
will say created at is going to be a date time and by default
2:48:20
it's going to take the current date just like this I can do the same thing for
2:48:26
post and I hope everything is okay
2:48:33
if it's not we can come here and regenerate our items
2:48:38
let's generate and I'm gonna restart my Prisma studio
2:48:44
and let's try to create for example our categories
2:48:49
I'm going to open up my API and create a new folder and it's going to be
2:48:54
categories I'm going to create my route
2:49:01
and I'm gonna try to fetch all my categories to do that I will create a
2:49:06
get method export const get is going to be an async function
2:49:13
and I will write here try catch methods if there is an error I can console lock
2:49:19
this error and also I can send it to my user return
2:49:25
new next response I will say Json stringify I'm going to
2:49:32
send my message here you can send any object something went wrong
2:49:41
and I can send here a status inside an object
2:49:46
and it's going to be 500 a server error and let's try to find all of our
2:49:53
categories I will say const categories wait Prisma
2:49:59
dot category remember the name is category
2:50:06
and I will say find mini basically it's gonna find all the categories and finally we can send it to
2:50:14
our user let me duplicate this and move it here in this case it's going to be successful
2:50:21
to 100 and I will drag the past my categories
2:50:27
that I've hatched here okay by the way let's import this Prisma
2:50:34
there is something wrong with my yes code okay let's try I'm gonna come here and say API
2:50:41
categories as you can see it's an empty array let's
2:50:47
open up our studio I'm gonna refresh here all our models are here and let's
2:50:54
create our categories I will add record
2:51:05
let's try I'm gonna refresh and it's here perfect right now using this endpoint I
2:51:12
have hatch my categories but before let's add others
2:51:20
okay let's open up our home page
2:51:26
and in this component by the way let me zoom out a hundred percent okay
2:51:34
inside this component I'm gonna fetch my data let's open up
2:51:40
category list and let's create here our function I will say const get data is
2:51:47
going to be async and I'll say const response
2:51:52
await I will call to fetch function and my endpoint here API categories
2:52:01
and I can write my options here and I will say cache
2:52:07
no store because by default next.js is caching your requests but I don't want
2:52:13
to do that because it's just a tutorial and I wanna always show you to fresh
2:52:18
data of course they are not changing in this situation the better option is using
2:52:24
cache but in case of making any changes for the tutorial I just want to see it directly this is why I'm not caching
2:52:32
okay and after that I will say if response is okay
2:52:38
actually if it's not okay I will throw error
2:52:45
or you can send any message I'll just say failed if it's not finally we can return
2:52:53
response and Json let's call this function here of course
2:52:58
it should be async cons theta equals a weight and our
2:53:06
function let's use this data here
2:53:15
let's remove them and I'm going to leave only one of them
2:53:21
and I'm gonna map to my data if there is data take all items
2:53:29
and return this link
2:53:34
like that and there's a warning because we are using a map in this case we should provide here a unique key
2:53:42
and I'll say key item dot ID but remember in mongodb we are using
2:53:48
underscore ID let's see okay it's not attractive
2:53:54
fetching our URL I will write here
2:54:04
perfect as you can see six items it means it works let's use their images
2:54:12
foreign titles item dot title
2:54:21
item Dot and also I can change here
2:54:29
styles item dot Slack
2:54:36
perfect and I can write here a condition if
2:54:41
there's an image because it's not required remember if there is an image
2:54:49
okay as you can see it's that easy guys I can do the same thing for these posts
2:54:55
let's open up I'm gonna copy here
2:55:00
and open up my card list and I will paste it here in this case
2:55:08
it's going to be posts and let's call this function here I will say async
2:55:15
constella get data of course await
2:55:22
but we don't have our endpoint yet let's create inside API I will say posts
2:55:29
and I'm going to do exactly the same thing let's paste here again get methods in this case is going
2:55:37
to be posts and it's going to check our post model
2:55:42
but there is something different here because in our example we are going to
2:55:48
need this pagination we are going to fetch only four items
2:55:54
if you are using client components it's really easy you can just store a number
2:56:00
starting from one and when you click a button you can just increase that state
2:56:06
and fetch items but if you are using server-side rendering to reach that page
2:56:11
number we are going to be using search params for example at the beginning we are not
2:56:17
going to have any query here in this case the page number will be one
2:56:23
and when I click on this button I'm gonna drag the create here a page query
2:56:28
and I'm going to increase that number it was one it's gonna be two and if I click
2:56:34
here it's gonna be one again if I click here it's going to be three of course we are gonna check if we have
2:56:40
more items or not we are going to create all these functionalities but before let's take this page query in our home
2:56:48
page and pass it to our component so I'm going to open up my home page
2:56:57
where is my home page I'm going to close them
2:57:03
okay here and I will say get the search problems
2:57:10
and I will create a page here and I will say if there is a search
2:57:16
params and Page take it if it's not write it one
2:57:22
and at the beginning as I said we don't have any page in this case it's gonna be one
2:57:27
and of course it says string it should be a number I will just use parse integer and pass
2:57:35
it my string and right now I can pass my page here
2:57:40
just like that so let's take these props here
2:57:46
where is our cart list here
2:57:51
and I'm gonna pass this page to my fetching function I'm going to take it
2:57:57
here and write it as a query page equals page
2:58:04
of course it should be a package we are using JavaScript here and inside my
2:58:10
route I'm gonna make some changes firstly I want to decide how many posts
2:58:16
I want to show to user I'll say const post per page
2:58:21
so let's say to for example and right now I'm gonna get my page number remember we are hiding this inside our
2:58:29
request and in this URL we have our page let's get our search params First const
2:58:38
search prompts new URL and I'm gonna pass here request
2:58:43
URL and inside this search params we have our page const
2:58:49
page search params.get and page right now we
Next.js App Router Rest API Tutorial
2:58:55
have the page number and post per page so what I'm gonna do is writing here my
2:59:01
option I will just say take only post per page
2:59:07
he's gonna get only two items of course it's an option and I will say skip post
2:59:15
per page multiply by Page minus one why I'm doing this because at the beginning
2:59:21
remember our page number is one one minus one is zero If I multiply this
2:59:27
by post per page is going to be zero it means we are not gonna skip any post we
2:59:33
are going to start from zero and we are gonna take only two items and when we
2:59:39
click on that by the way it's not working because we didn't complete it yet but imagine where the next button
2:59:45
here when I click that the page number will be 2 in this case 2
2:59:51
minus one is going to be one If I multiply them it's going to be 2 and it means we are gonna skip first two
2:59:59
and we are going to take two items it works like that it's really easy
3:00:05
I'm Gonna Save and let's open up our page and I'm gonna open up my studio and
3:00:13
create some posts for the test purpose I'll set posts by the way it's raining
3:00:20
too much I hope sound is not coming to you actually I can take a break
3:00:26
okay I'm taking break and I'll see you soon okay guys I'm back during this break I
3:00:34
just created some posts their titles are from one to six
3:00:40
and I gave some categories and let's fetch this data
3:00:48
I'm gonna come here and I'm gonna show my posts
3:00:54
okay using this data I can call this card component
3:01:01
map if there's a data map through this data and take items
3:01:08
and show a cut let's remove others I should add here a unique key
3:01:16
remember item dots ID but it's not an HTML element I should use it inside my
3:01:25
card component I will take that key
3:01:30
and use it here okay and also I'm gonna pass my item
3:01:39
item equals item and using this prop
3:01:44
I can show item dot title let's see
3:01:50
if I forgot dot here
3:01:58
as you can see only two items if I click here I'm gonna update my page
3:02:05
let's do that I'm going to open up my component what was the name pagination
3:02:13
okay here so it's gonna be a client component
3:02:18
use client and using use rather hook let's say
3:02:24
const rather from next navigation
3:02:31
I'm gonna update my page but before I should take this as a prop
3:02:36
let's open up cart list and I'm gonna paste my page
3:02:44
and if I click here on click event I'm gonna use my router
3:02:51
push and I'm just going to add here a query and Page will be Page Plus One let
3:02:58
me close this menu and I can do the same thing for other when I click it's gonna
3:03:03
be -1 let's try I will click as you can see we are in
3:03:11
the page two right now and we have three and four
3:03:16
if I click more five and six but there is a problem here if I click
3:03:22
more it's going to default page but we don't have any item so I have to check if I have previous
3:03:33
and next items if we don't have I'm gonna disable this
3:03:42
and I will do the same thing for this one as next
3:03:49
let's give a style for them I will say
3:03:54
if button is disabled I'm gonna change its color
3:04:00
it was Crimson but I'm just gonna decrease its opacity
3:04:06
and cursor will be not allowed
3:04:13
but how we are gonna take them let's come back
3:04:20
and create here as previews and next I will say const as previous
3:04:29
and next and I'm gonna pass them here
3:04:41
okay but how we are going to make this decision firstly I'm gonna need post per
3:04:47
page you can make this calculation in the API
3:04:52
but doesn't matter we can do it here also remember it was two and I have a
3:04:58
page here and I can say if post per page multiply by Page minus one
3:05:06
bigger than zero for example for the first page 1 minus 1 is going to be 0 0
3:05:12
multiplied by whatever is going to be zero doesn't matter and it's not bigger than zero in this
3:05:19
case it's gonna be disabled but for this one we are gonna need the
3:05:25
total number of our posts because we are gonna check if we have more posts or not
3:05:31
so how we are gonna get this count I can come here and write another
3:05:37
operation and I can say count equals Prisma post and count but I don't want
3:05:45
to do that I wanna make everything in just one request to do that I'm gonna use transaction
3:05:51
methods and inside these methods I can call
3:05:56
multiple queries so firstly we are gonna find our all posts and secondly we are
3:06:03
gonna find the count of those posts in this case we are going to have two items
3:06:08
first one will be posts and second one will be count let's say Prisma post find
3:06:15
mini and second one will be count of course we don't need post here it's
3:06:22
going to be transaction and it's not going to be an object it's going to be an array
3:06:30
just like this but we don't have our Curry here let's create constant query
3:06:38
and remember we are taking two items and skipping this amount of items let's use
3:06:46
it here okay right now I can send my posts and also
3:06:53
discount let's use it here right now we don't have only posts
3:06:59
we have posts and also account in this case this data will be posts
3:07:07
and right now I can write my condition I will say pause per page again multiply
3:07:13
by Page minus one and plus pause per page
3:07:19
and I'm gonna check if it's smaller than count or not if it's it means we have
3:07:25
more items if not we are gonna disable that button let's calculate at the beginning we have six items and our page
3:07:33
number is one in this case this expression will be zero plus 2 will be 2 and 2 is smaller than
3:07:42
6. in this case it's gonna be true let's see
3:07:50
I'm gonna come here as you can see our cursor has changed but background color
3:07:56
there is something wrong there I'm going to open up my CSS
3:08:03
oh I said border it's gonna be background
3:08:09
okay if I click here right now as you can see we have
3:08:15
previous perfect and in this case we can't click
3:08:22
here anymore but we can come back
3:08:28
it's that easy right now we are gonna make something different if you remember
Next.js Send a Query to API (Fetch Post by Category)
3:08:34
we have block pages and we can search for in a category here for example if I
3:08:40
click it's going to open up this page and again yeah I'm gonna pass our page
3:08:45
here page number and also we are gonna pass this category let's do that let's
3:08:51
close everything here and open up blog page I'm gonna take the search params
3:08:58
and again I'm going to create page integer search
3:09:06
params.page if it doesn't exist it's going to be one and I'm gonna search for
3:09:11
one more thing and it's gonna be my category let's actually structure this like that
3:09:18
and right now I can pass them to my card list
3:09:25
by the way I can change here cat block and I can capitalize this
3:09:33
let's open up title and I will say text transform capitalize
3:09:39
that's all and as you can see we have items but we are not fetching based on
3:09:44
this category let's handle that I'm going to open up my card list am
3:09:51
and I'm gonna take category but it's not required in the home page
3:09:57
we are not going to have any category but for this page we are gonna pass it in this case I can pass it to my API
3:10:04
request and I will say and category equals
3:10:11
category but if it doesn't exist it's going to be empty or you can do the same
3:10:17
thing here if it doesn't exist you can say empty string right now I'm gonna take this
3:10:23
category in my API route remember we have page here I will do the
3:10:31
same thing for category and I'm gonna add here a condition and
3:10:36
it's going to be where and I will say if there is a category
3:10:42
cat slack will be this category because remember in our schema
3:10:51
post has a category slack we are gonna fetch all these posts if they belong to
3:10:57
this category I'm writing this condition because if I
3:11:02
drag to say cats like equals category is going to give an error because remember it's not
3:11:09
required we are calling this only in this page
3:11:14
this is why I'm using it like that and I should use this query here also
3:11:20
but remember we are counting our posts so I'm just gonna need this part
3:11:25
otherwise it's going to take only two items in this case it's gonna give us two all the time I don't want to do that
3:11:32
so I will say where and I'm gonna take only this part of this query so I will
3:11:39
say query dot where
3:11:45
let's check as you can see there is only one item by the way we didn't change here let's
3:11:52
open up our cart we changed only this title I will copy
3:11:58
this and change here item dot created at
3:12:05
but if I say this as you can see it shows the full date I'm just gonna take
3:12:11
this first 10 items to do that I'm gonna use substring method
3:12:18
start from 0 and take first 10 items
3:12:23
okay let's change here item Dot
3:12:29
cat Slack
3:12:35
if I say food for example he's gonna fetch this data fourth item
3:12:42
and it's awesome because it's really important for SEO when search engines
3:12:47
visit this page they are gonna see this server-side rendered page and it's the
3:12:52
same thing for our Pages they can index those pages page 1 page two and if you
3:12:59
have any blog page or e-commerce page you are gonna see that how useful they
3:13:05
are and what else let's take care of single
3:13:11
posts when I click here it's going to open up the single page
3:13:19
I'm going to close here block we have slack here but we don't have
3:13:25
posts actually let's create posts page it's going to be easier I'm
3:13:32
gonna move this slack here and by the way
3:13:37
let's continue changing them I will say item dot image
3:13:44
and of course if there is an image because it's not required
3:13:53
and this description
3:13:58
I can do the same thing here because description will be really long I'm going to use substring
3:14:05
and I'm gonna take let's say first 60 items and when I click here finally
3:14:13
we are going to open up post page and item dot slack and I will do the same
3:14:21
thing for this title where is our Title Here
3:14:30
okay as you can see we don't have any image actually instead of this image
3:14:40
I can write my condition here
3:14:45
so it's not gonna show this container perfect and when I click here
Fetch a Single Post with the User Information
3:14:51
it's going to show up our post page right now let's create our endpoint for
3:14:57
this single page and fetch our item let's close everything
3:15:04
inside API posts I will copy this and create my Slack
3:15:14
and paste and I will say get single post
3:15:20
in this case we can take our params here
3:15:26
we don't need search params any of them
3:15:31
let's remove all of these
3:15:37
and I'm gonna take my slack first I'll say const
3:15:42
slack is going to come from params remember we are using this slack here
3:15:48
this is how we can reach it and using this slack I'm gonna search my post I
3:15:54
will say const post wait Prisma dot post and I will say find unique
3:16:01
and I will write here my condition where slack will be R slack so if you are
3:16:08
using the same name you don't have to write it like that you can keep it like this and I'm gonna pass this post here
3:16:17
and let's fetch our item I'm going to come here
3:16:23
let's close here and I'm going to make this async function and I'm gonna do exactly the same thing
3:16:30
let's copy here and paste
3:16:37
get data we are going to need our slack and we are going to take this using
3:16:42
params const Slack equals params and using this slug we can
3:16:51
call our function get data and Slack
3:16:58
Now using this slack we can make API request and I'm gonna pass this slide here
3:17:05
of course like that and it's going to return us a data
3:17:11
and using this data let's write our title
3:17:19
image first I'm going to write my condition
3:17:25
if there is an image show it here
3:17:31
and we are going to handle here later and if you remember we have a description container here and
3:17:39
it includes any HTML element it can be P tag H1 tag
3:17:45
whatever so what I'm gonna do is instead of writing here data dot description I'm
3:17:50
gonna self-close this div and I'm gonna add dangerously set inner HTML because
3:17:57
remember in our example we are using this editor so we can pass any
3:18:03
paragraphs or bold items or H1 tag or
3:18:08
whatever to show them here we are gonna need this item I will say underscore
3:18:14
HTML description
3:18:19
of course you can use here any library to make this operation more secure but
3:18:25
for now I'm gonna leave it like that but after we are gonna need a library basically that can be only P tag Adder
3:18:32
tag something related to text nothing else okay and I will save
3:18:40
and it's here but this image is still here there is something wrong
3:18:45
oh it's a user image I'm sorry it's gonna be this image
3:18:51
if data dot image exists just like this
3:18:59
okay but what about this user when we've hatched this post
3:19:04
shoot with hatch also this user and pass it here
3:19:11
you don't have to do that it's really easy to handle I'm just gonna come here and just say include user true I can do
3:19:21
this because in our model we have user inside post there is a relationship
3:19:26
between them so I can easily take my post with their
3:19:32
user in this case I can update my user easily let's come here and I will just say item
3:19:40
user and username oops not item data
3:19:49
as you can see it's here and I can change my image it was here remember and I will say if
3:19:57
user image exists
3:20:04
okay it's not here let's see our users
3:20:10
okay it's image
3:20:19
and right now there's a problem because nexjs doesn't allow us to use this URL
3:20:25
is an external URL to prevent this I will basically copy this URL
3:20:30
and open up my settings next config and right here my option is
3:20:38
going to be images domains and I will add my domain here
3:20:45
if you make any changes in this config file you should restart your application as you can see
3:20:53
it's not working anymore I will refresh
3:20:59
okay it's because of this subdomain
3:21:14
and perfect I should check for this can I use it
3:21:19
like that or not I'm not sure I'm just gonna leave it like that
3:21:28
and right now we can fetch our comments and
Fetch All Comments of a post
3:21:35
add a new comment let's create our endpoint quickly
3:21:42
I will copy this and create new endpoint it's going to be comments
3:21:50
and I'm gonna paste it here get
3:21:56
all comments of a post we don't need perms
3:22:03
but we are going to need our post ID because we are going to fetch all these commands using this post slag so let's
3:22:11
create search params new URL
3:22:18
request.url and I'll say const Slack
3:22:26
it's gonna be let's say post slack again
3:22:31
basically we are going to pass this slack as a query and we are going to take it and search for our comments
3:22:40
I will see command find mini where and inside I'm going to write my
3:22:46
condition remember how we are doing this if there is a post Slack just use it and again we are going to
3:22:54
take the user and finally we are going to send these comments
3:23:02
like this remember in our schema we have posts
3:23:07
like we are going to search for it I will close here
3:23:14
okay let's do that I'm gonna close them and open up my
3:23:19
commands component I'm gonna make here something different
Next.js Client Side Data Fetching (App Router)
3:23:25
because it's going to be a client-side component use client
3:23:30
we don't need here SEO or something and then we add new command we are going to
3:23:36
see it here immediately so basically I'm gonna fetch my items on the client side
3:23:42
to do that you can use use effect but I recommend you to use react query or SWR
3:23:50
I really love SWR it's really easy to use and it's really lightweight
3:23:57
I'll say yarn at SWR
3:24:03
and let's call this hook I'll say import use SWR from SWR
3:24:11
okay as you can see there is a temporary status here instead of this I can use
3:24:16
use session hook this is the another reason why we are using use client
3:24:22
because if you are not logged in we are not going to see this input and after
3:24:27
I'm gonna fetch my data const data and is loading
3:24:34
use SWR and here I'm going to write my endpoint
3:24:42
API commands and remember we have to pass here post
3:24:48
Slack and we are going to take this as a prop
3:25:01
like that let's open up our single post page here
3:25:07
and I'm gonna pass this Slack to my comments
3:25:15
okay and we should write here any fetching method you can use axials you
3:25:21
can use JavaScript fetch so let's define this here I'll say const
3:25:27
Patcher is going to be an async function const response await I'm just gonna drag
3:25:36
to use fetch methods and I'm gonna pass my URL here and after I'm gonna get my
3:25:43
data await response dot Json
3:25:49
and I will say if response is not okay
3:25:55
draw an error and I'm gonna show my message so I will say const error
3:26:01
remember we are sending a message here I can take it and throw that error
3:26:09
data Dot message and just draw this
3:26:16
and finally return data so I can use this fetcher
3:26:21
here by the way I didn't close this backtick
3:26:28
okay let's use it here we have many comments I'm just gonna
3:26:35
delete all of them it's gonna be only one of them
3:26:42
I'll say if it's looting right here loading if it's not
3:26:49
mapped through this data
3:26:55
and show this comment
3:27:00
of course we don't have unique key it's going to be Item ID
3:27:08
let's use this item here if you remember we are fetching this with our user item
3:27:14
dot user dot name created at
3:27:22
and description
3:27:29
and user image
3:27:37
foreign
3:27:48
as you can see we don't have any comment yet let's create we are using this post
3:27:54
I'm gonna come here open up comments
3:28:00
add record first comment
3:28:06
and I'm going to choose a user here we have only one user
3:28:12
and I'm gonna choose my post five this one
3:28:19
let's save I'm gonna refresh
3:28:27
okay there's something wrong we couldn't pass this slack item
3:28:35
in our single page we have pulse Slack
3:28:44
we are passing this here and taking that
3:28:51
slug okay it's gonna be post Slack
3:29:06
okay inside our API we can't get this post slack it's undefined
3:29:16
let's check this
3:29:22
okay it's five but by the way SWR trying to refetch this that's because there's
3:29:29
an error this is the other benefit of using SWR okay we are sending our post
3:29:35
slack but let's console log this
3:29:42
I'm gonna comment this out because it's really long I will refresh
3:29:49
no because of this capital letter I think
3:29:54
foreign
3:30:04
I wasted your time and okay cool it works
3:30:10
if I check other page as you can see it's empty
3:30:17
by the way there is something wrong here we are logged in but we can't see our
3:30:22
input here authenticated
3:30:30
it should be of course this structured I can delete this
3:30:37
okay right now I'm gonna store my text here and when I click here I'm gonna
Create a Comment
3:30:42
create a new comment and I'm gonna show it here immediately let's create our endpoint
3:30:50
I will create one more
3:30:55
and I'll say create a comment
3:31:01
it's going to be a post method and firstly
3:31:08
I have to verify my user of course we are hiding this but someone can use our
3:31:14
API we cannot trust users we have to verify them on the server side
3:31:20
so basically I'm gonna need the user session here if you are using next auth it's really
3:31:28
easy if you remember we have an option here and also I can export one more thing and
3:31:36
it's gonna be a server side sessions let's say get off session
3:31:44
get server session function as you can see here and I'm gonna pass here my
3:31:49
options auth options so I can use this function and I can
3:31:56
reach to my user so firstly I will say const session
3:32:04
import this and I will say if there is no user
3:32:10
I mean if there is no session we are not allowed to create new comment
3:32:16
in this case we are going to return an error and it's going to be 401.
3:32:22
foreign ticated if there is a session it means we are
3:32:29
authenticated in this case we can take our body and create a new comment let's
3:32:36
do that I will delete this and I will say const body
3:32:42
weight request and Json and after that I will say
3:32:48
comment Prisma comment and create let's delete this
3:32:55
and I'm gonna pass here my data I can drag to say body but I'm going to add
3:33:00
some additional information so I will say take everything inside this body but
3:33:07
additionally add here user email and we are going to take it from our
3:33:12
session as you can see we are not taking our
3:33:18
user from client-side we are doing everything in the back end and our application is really secure
3:33:25
right now I will save and let's use it here firstly I'm gonna
Next.js SWR Mutation
3:33:32
store my description let's write it here const description
3:33:38
set description use statehook at the beginning it's going to be empty
3:33:45
and when I change here on change event
3:33:51
it's gonna set my state event Target value
3:33:57
let me close this sidebar okay and finally when I click on this
3:34:03
button I'm going to call handle submit
3:34:10
const handle submit is going to be async function
3:34:15
we are going to make a request and I will say oh wait fetch
3:34:23
API commands and I'm gonna write here my method is going to be a post method
3:34:31
and inside body I'm gonna send my description to do that I will say Json
3:34:38
stringify and I will pass my description but I'm gonna pass one more thing so
3:34:44
let's say description and also post Slack
3:34:49
because when we create any comment we have to pass this post
3:34:56
Slack okay this is the single page I will
3:35:02
close this and finally when we add our new comment
3:35:07
I want to see it here to do that we are going to revalidate this data it's really easy I will just come here and
3:35:15
say mutate and after the successful operation I'm
3:35:20
gonna call this function let's see I hope everything is okay I
3:35:27
will say second sent if I refresh the page
3:35:37
okay let's open up this error and let's see
3:35:43
what's going on oh there is something wrong here
3:35:52
oh I forgot here await it's an async function
3:35:59
let's try again and it's here okay perfect
3:36:05
so what else we have only writing function
3:36:11
by the way it redirects me to the home page there is something wrong let me
3:36:16
close everything and open up right page
3:36:26
oh I said authenticated it's going to be unauthenticated
3:36:34
okay right now I'm gonna store my title this text
Add New Post
3:36:40
and also my file so let's create some new States
3:36:47
so firstly I'm gonna create my endpoint
3:36:52
I will do exactly the same thing I can copy this and paste for my post
3:37:01
I will say create a post again I'm gonna check my session if it doesn't exist we
3:37:07
are going to return this error and I will say post
3:37:13
and here we are going to take Buddy user email
3:37:19
again and that's all let's use it here firstly I'm gonna store my items
3:37:27
of course it can't be conditional so I'm gonna move it here
3:37:34
and firstly I will say file set file new state
How to Upload Image using Firebase
3:37:40
at the beginning it's going to be no basically when we add here any item I'm
3:37:47
gonna update this file for these items I'm gonna create an
3:37:53
input and its type will be file
3:38:00
and I will give an ID let's say file or image
3:38:05
and I will say on change event and I'm gonna set my file event Target
3:38:14
files that I'm gonna take only one file single file is gonna be
3:38:19
the first item like that but I don't want to see this
3:38:26
input instead I'm gonna make this a label and when I click here it's gonna
3:38:31
automatically choose this file input to do that I will say
3:38:38
inner style and let's say display known
3:38:45
okay it's not here anymore and I'm gonna create here a label
3:38:58
and html4 will be our input ID which is image
3:39:05
actually let's move this here
3:39:13
and I click as you can see it's opening file if I choose
3:39:18
edit icon here it's going to update my state
3:39:25
and I will create here a user fact and I will basically say if file changes
3:39:31
directly upload it to firestore to do that I'm going to open up
3:39:38
firebase.google.com you can add here a new project that's right block
3:39:47
I don't need any Analytics it's going to create our project and we
3:39:53
are going to use the Firebase storage you can use any other uploading service but in this project I just preferred
3:40:01
using Firebase and using Firebase doesn't mean we are going to use Firebase database or any
3:40:08
other thing it's a huge platform that has a storage service database service
3:40:14
so we are just using storage
3:40:21
okay I'm going to come here let's say block again
3:40:30
and let's install Firebase and add Firebase
3:40:39
let's initialize our application inside utils
3:40:46
I will see Firebase and paste it here
3:40:53
of course we can hide our API key let's say
3:40:59
process Envy Firebase
3:41:12
okay let me close this and
3:41:19
using this app we can use our storage
3:41:29
let's come here build as you can see many services we are just going to use storage
3:41:39
it's going to be test mode you can choose any location
3:41:47
by the way let me close everything here I've opened too many tabs I hope it
3:41:54
didn't affect my recording let me close here
3:42:01
and let's create our user fact
3:42:10
I will say if file changes call this function const upload
3:42:21
and we are gonna upload our file here and I will say if file call this function because at
3:42:29
the beginning is going to be null it's not going to fire this function if we choose any file it's gonna run this
3:42:36
upload function see how we can do this
3:42:42
I just open documentation and here
3:42:48
there is an awesome example that includes everything we need here
3:42:54
as you can see we can upload our file and we can listen its status we can show
3:43:00
to user our progress if we cancel we can show it to User it's really useful of
3:43:06
course I'm not gonna use all these features I'm just going to upload my image and take the URL
3:43:13
let's copy this
3:43:19
and paste here I'm gonna import them
3:43:28
and I'm gonna initialize my storage let's do it somewhere here
3:43:35
and if you remember we created our application
3:43:41
where is our Firebase here okay I didn't export
3:43:47
I can use this app perfect
3:43:54
and I'm gonna delete those comments
3:44:02
as you can see we are using our storage and here we are passing any file name in
3:44:09
our case we can directly use our file.name but if we do this
3:44:15
and if you try to upload exactly the same image it's going to have the same
3:44:21
name to prevent this it should be unique I generally prefer creating here a new
3:44:28
date let's say const name or unit name
3:44:33
I'll say new date yeah time is going to give us a timestamp and
3:44:41
finally file dot name I can use it here
3:44:49
and if everything is okay it's gonna give us the download URL
3:44:55
we can use it and update our state let's create one more state
3:45:03
let's say media set media
3:45:08
at the beginning it's going to be an empty string
3:45:13
and we have our image we have our description and we are going to have our
3:45:20
title okay we already set this description
3:45:26
remember we are using this library and it's changing our value
3:45:31
and also I can change my title on change events
3:45:38
set title
3:45:45
and finally when we upload this image I'm gonna set my media
3:45:53
download URL and after that finally when I click on this button we
3:46:01
are gonna publish our post on click handle submit
3:46:16
is going to be async const response
3:46:22
weight fetch method I will say API posts
3:46:30
and the method will be post an inside body
3:46:38
I will say Json stringify I'm gonna pass my title
3:46:46
I'm gonna pass my description but remember its value
3:46:52
I'm gonna send my image and its media
3:46:59
and also I'm gonna need a slack and I can actually transform this title
3:47:06
into a slack to do that I'm gonna create here a function and I'm going to use some regular
3:47:12
expression basically if we have a title like llama Dev it's going to transform
3:47:19
this to something like that and this is going to be our Slack
3:47:26
so let's use our Title Here
3:47:34
and let's see I will say console log response
3:47:47
I will say by the way its color is black
3:47:55
there is our input here I will say color
3:48:02
text color okay description
3:48:08
I can choose any image let's choose this one
3:48:13
and if I submit okay there is a problem let's open up
3:48:19
our console and let's see what's going on
3:48:25
okay our session is not defined let's come here
3:48:31
and import this
3:48:37
there's something wrong with my eslint it's not showing my errors
3:48:47
okay publish 200
3:48:55
but it says there is an error oh category is missing I forgot I think
3:49:01
here category
3:49:08
how can I add this without destroying my design
3:49:13
maybe somewhere here anyway I'm just gonna create here an
3:49:19
input and after this tutorial I'm gonna change it and you can find it in the GitHub repository I really forgot that
3:49:26
I'm so sorry and I don't want to make any design right now so after this I can say
3:49:34
input placeholder category of course we should fetch our
3:49:42
categories and create here a select because I can give here any random category it shouldn't be like that
3:49:50
but as I said I just forgot it can be like that for now
3:49:56
or actually I can say
3:50:01
to do at category
3:50:07
I'm gonna make this later but for now temporary I will just say
3:50:14
travel for example
3:50:20
let's publish and this time it says user is missing
3:50:34
we have user user email we are using user email let's
3:50:42
check post okay user email
3:50:47
foreign Studio
3:50:55
I'm gonna start this again
3:51:04
let's open up post okay it's not here
3:51:13
let's actually delete this folder and restart our application
3:51:28
I'm gonna refresh here
3:51:35
let's select this image title
3:51:42
description and publish
3:51:48
and again user is missing
3:51:57
why is that
3:52:12
thank you user is here
3:52:23
our image okay guys it was not about the user it
3:52:29
was about this cat Slack by mistake I added here cat it's gonna
3:52:34
be cat slack and also I forgot this function brackets
3:52:40
right now it's working as we expected let's write here any title
3:52:48
I'm gonna choose any image here if you open your console you're gonna
3:52:55
see that your image is being uploaded
3:53:00
and I can write here in the description
3:53:06
if I publish you are gonna see that your item is here
3:53:12
now as you can see title and this is our Slack
3:53:17
description and image of course I should add this domain also otherwise it's gonna give us an error
3:53:26
let's say posts and title
3:53:31
as you can see I'm gonna add this URL
3:53:40
just like that let's refresh of course if you are
3:53:46
making any change here you should restart your application
3:53:58
and that's all I can add any comments
3:54:07
I can see my item by the way when you visit this page you can increase your
Prisma Increase Post View
3:54:14
post view remember we created here
3:54:20
where is our post here we have views and at the beginning
3:54:25
it's zero and when we visit this page we can increase that number
3:54:31
let's open up our endpoint here
3:54:37
if you remember we are directly fetching this item and instead I'm gonna update my item
3:54:45
and I'm gonna add here my data so I'm Gonna Change views
3:54:54
and I will write here increment one
3:55:00
so whenever I visit this page it's gonna update this post and it's gonna increment this property
3:55:08
let's save and see I will refresh as you can see it's still
3:55:14
fetching the data but if we check our post here I'm gonna
3:55:20
refresh you're gonna see that the views is one
3:55:30
again
3:55:35
and two it's that easy so what you can do here
3:55:40
if you remember we have a component here that we show the most popular blog posts
3:55:47
you can open that component you can do as we always do
3:55:54
just fetch posts using get data function and right here
3:55:59
another query just like popular true or if you are using
3:56:05
something else for example there is another data here editors pick
3:56:12
what you can do you can open up your schema and add here editor pick or is
3:56:18
featured whatever you want but I think you understood how to create
3:56:24
endpoints how to fetch data I'm not gonna do exactly the same thing
3:56:29
again and again and that's all
How to Deploy Next.js App to a VPS Server
3:56:41
so right now we can deploy our application
3:56:48
I'm going to open up my whole Stinger panel and if you remember I created a
3:56:53
server at the beginning of the video and right now I'm gonna create my application to do that I'm gonna click
3:57:01
on panel access and this is my login URL
3:57:08
it's going to be admin and my password
3:57:14
and as you can see in this server we don't have any website let me zoom in
3:57:20
I'm gonna add a website as you can see there are many options but in our project we are using node.js
3:57:28
so I'm gonna choose this one if you have any domain you can edit here in my case
3:57:34
I'm going to be using test.lamato and our node.js application is going to
3:57:41
run on this port and let's create
3:57:47
and it's ready I will click here you can see your
3:57:52
configurations and here I'm gonna install a free SSL certificate to do
3:57:58
that I'm gonna click here let's encrypt certificate make sure that you add your
3:58:04
IPA address as a DNS record and after that you are gonna be ready to
3:58:09
install and that's all if you are using Cloud
3:58:14
panel everything is easier so I'm gonna open up my code and my
3:58:20
terminal and I'm gonna build my application but there's a problem here let me show
3:58:27
you I will say yarn build
3:58:35
as you can see inside right page we have a problem
3:58:40
and the source of this problem is react quill because in next.js all components
3:58:47
are server-side components by default even if we write here use client at the
3:58:53
beginning it's a server side component and during this transformation we can
3:58:59
encounter some problems if you remember we had the same problem when we used
3:59:04
local storage so how we are going to fix this I'm gonna remove this from here
3:59:10
instead I'm gonna import my library dynamically so let's write it somewhere
3:59:16
here I will use Dynamic import and I will say SSR false let's save and
3:59:25
try
3:59:37
and right now as you can see there is no problem we are ready to deploy our application
3:59:44
to do that you can directly connect to your server and upload your files using
3:59:50
git but we are using this panel we can use it directly I'm gonna come here file
3:59:57
manager I'm gonna find my domain name
4:00:03
and this is the main folder of my application I can upload my files here
4:00:09
let's open up our folder and I'm going to choose everything you don't have to
4:00:15
use git next.js or even note modules because we
4:00:21
are going to build our application inside our server I'm gonna come here and say
4:00:28
compress and I'm going to take this file drag and
4:00:33
drop into my server let's open up this file I'll say extract
4:00:41
I'm going to choose the main folder okay they are here right now I'm gonna
4:00:47
connect to my server and build my application let's get back to the hpanel
4:00:54
let's open up settings and here SSH keys I'm going to open up
4:01:01
my terminal and create an SSH key I'm going to save it here you can give
4:01:08
any password and it's ready to copy our key I'm gonna
4:01:16
use this command by the way you can find all these commands in the description below you don't have to memorize
4:01:22
anything and I'm gonna take this key and paste inside my SSH keys
4:01:29
let's see llama Dev and paste here
4:01:37
it's going to take a while just 20 seconds or something like that and after that we are ready to connect our server
4:01:45
okay it's ready let's come back here
4:01:50
and we can connect to our server using this command
4:01:58
I will say yes enter my password
4:02:04
and it's ready if you remember we have created our application here
4:02:11
and the username is llama test I'm gonna come here and say
4:02:20
llama test right now I'm inside my application let's find out hddocs
4:02:29
let's see what's inside as you can see this is our website
4:02:34
let's get inside and let's see okay our files are here
4:02:42
right now I'm gonna install my libraries
4:02:53
and I'm going to activate the production mode and I will say npm run build
4:03:03
okay let's start our application npm start
4:03:10
and let's visit our website
4:03:17
and as you can see our application is here
4:03:30
it works as we expected because remember in mongodb we didn't add any specific
4:03:36
IPA address this is how we can fetch data
4:03:41
you can basically open up mongodb and add your IP address
4:03:48
I'm going to come here and I'm Gonna Change here
4:03:56
and the IP will be my server IP
4:04:02
in this case only my server will be able to access this data
4:04:07
and also you should go ahead and change your authentication provider URLs if you
4:04:14
remember we are using Google cloud and GitHub authentication you should go there and change the website address and
4:04:22
not us if you quit this terminal you won't be able to reach your application anymore
4:04:28
to prevent this we are going to be using pm2 let's say npm install pm2
4:04:36
latest and I'm going to install globally
4:04:41
basically it allows us to start our applications automatically even if we
4:04:47
restart our server it's gonna run to do that I will say pm2 start npm
4:04:56
you can give here any name I'll say next app and start
4:05:03
I will say pm2 save and that's all
4:05:09
let's see as you can see it's still working
4:05:17
and it allows us to fetch our data
4:05:25
perfect okay that's all guys I hope you liked it
Outro
4:05:31
if you learned something new today please like the video you can support normal day by joining the channel or
4:05:38
using the link in the description below don't forget to follow Lama dev's social media accounts I hope I'll see you in
4:05:45
the next tutorial goodbye